
Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000478  0000050c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000478  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080011c  0080011c  00000528  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000558  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a25  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000088a  00000000  00000000  00001011  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000423  00000000  00000000  0000189b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00001cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000462  00000000  00000000  00001e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004ff  00000000  00000000  000022e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000027e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	95 c0       	rjmp	.+298    	; 0x130 <__vector_1>
   6:	00 00       	nop
   8:	e6 c0       	rjmp	.+460    	; 0x1d6 <__vector_2>
   a:	00 00       	nop
   c:	37 c1       	rjmp	.+622    	; 0x27c <__vector_3>
   e:	00 00       	nop
  10:	81 c1       	rjmp	.+770    	; 0x314 <__vector_4>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e7       	ldi	r30, 0x78	; 120
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 31       	cpi	r26, 0x1C	; 28
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e1       	ldi	r26, 0x1C	; 28
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 32       	cpi	r26, 0x22	; 34
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	8e d1       	rcall	.+796    	; 0x3e0 <main>
  c4:	d7 c1       	rjmp	.+942    	; 0x474 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <CPU_Setup>:
	
long Count = 123456;

void Hex2Dec(unsigned long No);
void CPU_Setup(){
	DDRB = 0xff;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	87 bb       	out	0x17, r24	; 23
	DDRE = 0xff;
  cc:	82 b9       	out	0x02, r24	; 2
	DDRD = 0x00;
  ce:	11 ba       	out	0x11, r1	; 17
	
	EIMSK = 0x0f;
  d0:	8f e0       	ldi	r24, 0x0F	; 15
  d2:	89 bf       	out	0x39, r24	; 57
	EICRA = 0xaa;
  d4:	9a ea       	ldi	r25, 0xAA	; 170
  d6:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EICRB = 0x55;
  da:	95 e5       	ldi	r25, 0x55	; 85
  dc:	9a bf       	out	0x3a, r25	; 58
	EIFR = 0x0f;
  de:	88 bf       	out	0x38, r24	; 56
	sei();	
  e0:	78 94       	sei
  e2:	08 95       	ret

000000e4 <Hex2Dec>:
	Count -= 10;
	if(Count < 0) Count = 0;
	Hex2Dec(Count);
}

void Hex2Dec(unsigned long No) {
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
	long tmpNo = No;
	
	NUM[5] = tmpNo / 100000;
  e8:	20 ea       	ldi	r18, 0xA0	; 160
  ea:	36 e8       	ldi	r19, 0x86	; 134
  ec:	41 e0       	ldi	r20, 0x01	; 1
  ee:	50 e0       	ldi	r21, 0x00	; 0
  f0:	83 d1       	rcall	.+774    	; 0x3f8 <__divmodsi4>
  f2:	cc e1       	ldi	r28, 0x1C	; 28
  f4:	d1 e0       	ldi	r29, 0x01	; 1
  f6:	2d 83       	std	Y+5, r18	; 0x05
	tmpNo = tmpNo % 100000;
	NUM[4] = tmpNo / 10000;
  f8:	20 e1       	ldi	r18, 0x10	; 16
  fa:	37 e2       	ldi	r19, 0x27	; 39
  fc:	40 e0       	ldi	r20, 0x00	; 0
  fe:	50 e0       	ldi	r21, 0x00	; 0
 100:	7b d1       	rcall	.+758    	; 0x3f8 <__divmodsi4>
 102:	2c 83       	std	Y+4, r18	; 0x04
	tmpNo = tmpNo % 10000;
	NUM[3] = tmpNo / 1000;
 104:	28 ee       	ldi	r18, 0xE8	; 232
 106:	33 e0       	ldi	r19, 0x03	; 3
 108:	40 e0       	ldi	r20, 0x00	; 0
 10a:	50 e0       	ldi	r21, 0x00	; 0
 10c:	75 d1       	rcall	.+746    	; 0x3f8 <__divmodsi4>
 10e:	2b 83       	std	Y+3, r18	; 0x03
	tmpNo = tmpNo % 1000;
	NUM[2] = tmpNo / 100;
 110:	24 e6       	ldi	r18, 0x64	; 100
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	40 e0       	ldi	r20, 0x00	; 0
 116:	50 e0       	ldi	r21, 0x00	; 0
 118:	6f d1       	rcall	.+734    	; 0x3f8 <__divmodsi4>
 11a:	2a 83       	std	Y+2, r18	; 0x02
	tmpNo = tmpNo % 100;
	NUM[1] = tmpNo / 10;
 11c:	2a e0       	ldi	r18, 0x0A	; 10
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	40 e0       	ldi	r20, 0x00	; 0
 122:	50 e0       	ldi	r21, 0x00	; 0
 124:	69 d1       	rcall	.+722    	; 0x3f8 <__divmodsi4>
 126:	29 83       	std	Y+1, r18	; 0x01
	NUM[0] = tmpNo % 10;
 128:	68 83       	st	Y, r22
}
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <__vector_1>:
	EICRB = 0x55;
	EIFR = 0x0f;
	sei();	
}

ISR(INT0_vect){
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	0b b6       	in	r0, 0x3b	; 59
 13c:	0f 92       	push	r0
 13e:	2f 93       	push	r18
 140:	3f 93       	push	r19
 142:	4f 93       	push	r20
 144:	5f 93       	push	r21
 146:	6f 93       	push	r22
 148:	7f 93       	push	r23
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
 14e:	af 93       	push	r26
 150:	bf 93       	push	r27
 152:	ef 93       	push	r30
 154:	ff 93       	push	r31
	Count += 10;
 156:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 15a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 15e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 162:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 166:	0a 96       	adiw	r24, 0x0a	; 10
 168:	a1 1d       	adc	r26, r1
 16a:	b1 1d       	adc	r27, r1
 16c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 170:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 174:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 178:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	if (Count > 999999) Count = 999999;
 17c:	80 34       	cpi	r24, 0x40	; 64
 17e:	92 44       	sbci	r25, 0x42	; 66
 180:	af 40       	sbci	r26, 0x0F	; 15
 182:	b1 05       	cpc	r27, r1
 184:	64 f0       	brlt	.+24     	; 0x19e <__vector_1+0x6e>
 186:	8f e3       	ldi	r24, 0x3F	; 63
 188:	92 e4       	ldi	r25, 0x42	; 66
 18a:	af e0       	ldi	r26, 0x0F	; 15
 18c:	b0 e0       	ldi	r27, 0x00	; 0
 18e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 192:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 196:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 19a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	Hex2Dec(Count);
 19e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a2:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1a6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1aa:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1ae:	9a df       	rcall	.-204    	; 0xe4 <Hex2Dec>
}
 1b0:	ff 91       	pop	r31
 1b2:	ef 91       	pop	r30
 1b4:	bf 91       	pop	r27
 1b6:	af 91       	pop	r26
 1b8:	9f 91       	pop	r25
 1ba:	8f 91       	pop	r24
 1bc:	7f 91       	pop	r23
 1be:	6f 91       	pop	r22
 1c0:	5f 91       	pop	r21
 1c2:	4f 91       	pop	r20
 1c4:	3f 91       	pop	r19
 1c6:	2f 91       	pop	r18
 1c8:	0f 90       	pop	r0
 1ca:	0b be       	out	0x3b, r0	; 59
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <__vector_2>:

ISR(INT1_vect){
 1d6:	1f 92       	push	r1
 1d8:	0f 92       	push	r0
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	0f 92       	push	r0
 1de:	11 24       	eor	r1, r1
 1e0:	0b b6       	in	r0, 0x3b	; 59
 1e2:	0f 92       	push	r0
 1e4:	2f 93       	push	r18
 1e6:	3f 93       	push	r19
 1e8:	4f 93       	push	r20
 1ea:	5f 93       	push	r21
 1ec:	6f 93       	push	r22
 1ee:	7f 93       	push	r23
 1f0:	8f 93       	push	r24
 1f2:	9f 93       	push	r25
 1f4:	af 93       	push	r26
 1f6:	bf 93       	push	r27
 1f8:	ef 93       	push	r30
 1fa:	ff 93       	push	r31
	Count += 1;
 1fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 200:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 204:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 208:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 20c:	01 96       	adiw	r24, 0x01	; 1
 20e:	a1 1d       	adc	r26, r1
 210:	b1 1d       	adc	r27, r1
 212:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 216:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 21a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 21e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	if (Count > 999999) Count = 999999;
 222:	80 34       	cpi	r24, 0x40	; 64
 224:	92 44       	sbci	r25, 0x42	; 66
 226:	af 40       	sbci	r26, 0x0F	; 15
 228:	b1 05       	cpc	r27, r1
 22a:	64 f0       	brlt	.+24     	; 0x244 <__vector_2+0x6e>
 22c:	8f e3       	ldi	r24, 0x3F	; 63
 22e:	92 e4       	ldi	r25, 0x42	; 66
 230:	af e0       	ldi	r26, 0x0F	; 15
 232:	b0 e0       	ldi	r27, 0x00	; 0
 234:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 238:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 23c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 240:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	Hex2Dec(Count);
 244:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 248:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 24c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 250:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 254:	47 df       	rcall	.-370    	; 0xe4 <Hex2Dec>
}
 256:	ff 91       	pop	r31
 258:	ef 91       	pop	r30
 25a:	bf 91       	pop	r27
 25c:	af 91       	pop	r26
 25e:	9f 91       	pop	r25
 260:	8f 91       	pop	r24
 262:	7f 91       	pop	r23
 264:	6f 91       	pop	r22
 266:	5f 91       	pop	r21
 268:	4f 91       	pop	r20
 26a:	3f 91       	pop	r19
 26c:	2f 91       	pop	r18
 26e:	0f 90       	pop	r0
 270:	0b be       	out	0x3b, r0	; 59
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <__vector_3>:

ISR(INT2_vect){
 27c:	1f 92       	push	r1
 27e:	0f 92       	push	r0
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	0f 92       	push	r0
 284:	11 24       	eor	r1, r1
 286:	0b b6       	in	r0, 0x3b	; 59
 288:	0f 92       	push	r0
 28a:	2f 93       	push	r18
 28c:	3f 93       	push	r19
 28e:	4f 93       	push	r20
 290:	5f 93       	push	r21
 292:	6f 93       	push	r22
 294:	7f 93       	push	r23
 296:	8f 93       	push	r24
 298:	9f 93       	push	r25
 29a:	af 93       	push	r26
 29c:	bf 93       	push	r27
 29e:	ef 93       	push	r30
 2a0:	ff 93       	push	r31
	Count -= 1;
 2a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2a6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2aa:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2ae:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	a1 09       	sbc	r26, r1
 2b6:	b1 09       	sbc	r27, r1
 2b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 2bc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2c0:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2c4:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	if(Count < 0) Count = 0;
 2c8:	bb 23       	and	r27, r27
 2ca:	44 f4       	brge	.+16     	; 0x2dc <__vector_3+0x60>
 2cc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 2d0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2d4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2d8:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	Hex2Dec(Count);
 2dc:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2e0:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2e4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2e8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 2ec:	fb de       	rcall	.-522    	; 0xe4 <Hex2Dec>
}
 2ee:	ff 91       	pop	r31
 2f0:	ef 91       	pop	r30
 2f2:	bf 91       	pop	r27
 2f4:	af 91       	pop	r26
 2f6:	9f 91       	pop	r25
 2f8:	8f 91       	pop	r24
 2fa:	7f 91       	pop	r23
 2fc:	6f 91       	pop	r22
 2fe:	5f 91       	pop	r21
 300:	4f 91       	pop	r20
 302:	3f 91       	pop	r19
 304:	2f 91       	pop	r18
 306:	0f 90       	pop	r0
 308:	0b be       	out	0x3b, r0	; 59
 30a:	0f 90       	pop	r0
 30c:	0f be       	out	0x3f, r0	; 63
 30e:	0f 90       	pop	r0
 310:	1f 90       	pop	r1
 312:	18 95       	reti

00000314 <__vector_4>:

ISR(INT3_vect){
 314:	1f 92       	push	r1
 316:	0f 92       	push	r0
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	0f 92       	push	r0
 31c:	11 24       	eor	r1, r1
 31e:	0b b6       	in	r0, 0x3b	; 59
 320:	0f 92       	push	r0
 322:	2f 93       	push	r18
 324:	3f 93       	push	r19
 326:	4f 93       	push	r20
 328:	5f 93       	push	r21
 32a:	6f 93       	push	r22
 32c:	7f 93       	push	r23
 32e:	8f 93       	push	r24
 330:	9f 93       	push	r25
 332:	af 93       	push	r26
 334:	bf 93       	push	r27
 336:	ef 93       	push	r30
 338:	ff 93       	push	r31
	Count -= 10;
 33a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 33e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 342:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 346:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 34a:	0a 97       	sbiw	r24, 0x0a	; 10
 34c:	a1 09       	sbc	r26, r1
 34e:	b1 09       	sbc	r27, r1
 350:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 354:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 358:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 35c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	if(Count < 0) Count = 0;
 360:	bb 23       	and	r27, r27
 362:	44 f4       	brge	.+16     	; 0x374 <__vector_4+0x60>
 364:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 368:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 36c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 370:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	Hex2Dec(Count);
 374:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 378:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 37c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 380:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 384:	af de       	rcall	.-674    	; 0xe4 <Hex2Dec>
}
 386:	ff 91       	pop	r31
 388:	ef 91       	pop	r30
 38a:	bf 91       	pop	r27
 38c:	af 91       	pop	r26
 38e:	9f 91       	pop	r25
 390:	8f 91       	pop	r24
 392:	7f 91       	pop	r23
 394:	6f 91       	pop	r22
 396:	5f 91       	pop	r21
 398:	4f 91       	pop	r20
 39a:	3f 91       	pop	r19
 39c:	2f 91       	pop	r18
 39e:	0f 90       	pop	r0
 3a0:	0b be       	out	0x3b, r0	; 59
 3a2:	0f 90       	pop	r0
 3a4:	0f be       	out	0x3f, r0	; 63
 3a6:	0f 90       	pop	r0
 3a8:	1f 90       	pop	r1
 3aa:	18 95       	reti

000003ac <Display>:
	NUM[1] = tmpNo / 10;
	NUM[0] = tmpNo % 10;
}

void Display(){
	for (unsigned char k=0; k<6; k++){
 3ac:	20 e0       	ldi	r18, 0x00	; 0
 3ae:	15 c0       	rjmp	.+42     	; 0x3da <Display+0x2e>
		FND_SEL = DGT[k];
 3b0:	82 2f       	mov	r24, r18
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	fc 01       	movw	r30, r24
 3b6:	ec 5f       	subi	r30, 0xFC	; 252
 3b8:	fe 4f       	sbci	r31, 0xFE	; 254
 3ba:	30 81       	ld	r19, Z
 3bc:	38 bb       	out	0x18, r19	; 24
		FND_DB = FND[NUM[k]];
 3be:	fc 01       	movw	r30, r24
 3c0:	e4 5e       	subi	r30, 0xE4	; 228
 3c2:	fe 4f       	sbci	r31, 0xFE	; 254
 3c4:	e0 81       	ld	r30, Z
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	e6 5f       	subi	r30, 0xF6	; 246
 3ca:	fe 4f       	sbci	r31, 0xFE	; 254
 3cc:	80 81       	ld	r24, Z
 3ce:	83 b9       	out	0x03, r24	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d0:	83 e3       	ldi	r24, 0x33	; 51
 3d2:	9b e2       	ldi	r25, 0x2B	; 43
 3d4:	01 97       	sbiw	r24, 0x01	; 1
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <Display+0x28>
	NUM[1] = tmpNo / 10;
	NUM[0] = tmpNo % 10;
}

void Display(){
	for (unsigned char k=0; k<6; k++){
 3d8:	2f 5f       	subi	r18, 0xFF	; 255
 3da:	26 30       	cpi	r18, 0x06	; 6
 3dc:	48 f3       	brcs	.-46     	; 0x3b0 <Display+0x4>
		FND_SEL = DGT[k];
		FND_DB = FND[NUM[k]];
		_delay_ms(dTime);
	}
}
 3de:	08 95       	ret

000003e0 <main>:

int main(void) {
	CPU_Setup();
 3e0:	73 de       	rcall	.-794    	; 0xc8 <CPU_Setup>
	Hex2Dec(Count);
 3e2:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3e6:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3ea:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 3ee:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	
	while(1) {
		Display();
 3f2:	78 de       	rcall	.-784    	; 0xe4 <Hex2Dec>
 3f4:	db df       	rcall	.-74     	; 0x3ac <Display>
 3f6:	fe cf       	rjmp	.-4      	; 0x3f4 <main+0x14>

000003f8 <__divmodsi4>:
 3f8:	05 2e       	mov	r0, r21
 3fa:	97 fb       	bst	r25, 7
 3fc:	16 f4       	brtc	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fe:	00 94       	com	r0
 400:	0f d0       	rcall	.+30     	; 0x420 <__negsi2>
 402:	57 fd       	sbrc	r21, 7
 404:	05 d0       	rcall	.+10     	; 0x410 <__divmodsi4_neg2>
 406:	14 d0       	rcall	.+40     	; 0x430 <__udivmodsi4>
 408:	07 fc       	sbrc	r0, 7
 40a:	02 d0       	rcall	.+4      	; 0x410 <__divmodsi4_neg2>
 40c:	46 f4       	brtc	.+16     	; 0x41e <__divmodsi4_exit>
 40e:	08 c0       	rjmp	.+16     	; 0x420 <__negsi2>

00000410 <__divmodsi4_neg2>:
 410:	50 95       	com	r21
 412:	40 95       	com	r20
 414:	30 95       	com	r19
 416:	21 95       	neg	r18
 418:	3f 4f       	sbci	r19, 0xFF	; 255
 41a:	4f 4f       	sbci	r20, 0xFF	; 255
 41c:	5f 4f       	sbci	r21, 0xFF	; 255

0000041e <__divmodsi4_exit>:
 41e:	08 95       	ret

00000420 <__negsi2>:
 420:	90 95       	com	r25
 422:	80 95       	com	r24
 424:	70 95       	com	r23
 426:	61 95       	neg	r22
 428:	7f 4f       	sbci	r23, 0xFF	; 255
 42a:	8f 4f       	sbci	r24, 0xFF	; 255
 42c:	9f 4f       	sbci	r25, 0xFF	; 255
 42e:	08 95       	ret

00000430 <__udivmodsi4>:
 430:	a1 e2       	ldi	r26, 0x21	; 33
 432:	1a 2e       	mov	r1, r26
 434:	aa 1b       	sub	r26, r26
 436:	bb 1b       	sub	r27, r27
 438:	fd 01       	movw	r30, r26
 43a:	0d c0       	rjmp	.+26     	; 0x456 <__udivmodsi4_ep>

0000043c <__udivmodsi4_loop>:
 43c:	aa 1f       	adc	r26, r26
 43e:	bb 1f       	adc	r27, r27
 440:	ee 1f       	adc	r30, r30
 442:	ff 1f       	adc	r31, r31
 444:	a2 17       	cp	r26, r18
 446:	b3 07       	cpc	r27, r19
 448:	e4 07       	cpc	r30, r20
 44a:	f5 07       	cpc	r31, r21
 44c:	20 f0       	brcs	.+8      	; 0x456 <__udivmodsi4_ep>
 44e:	a2 1b       	sub	r26, r18
 450:	b3 0b       	sbc	r27, r19
 452:	e4 0b       	sbc	r30, r20
 454:	f5 0b       	sbc	r31, r21

00000456 <__udivmodsi4_ep>:
 456:	66 1f       	adc	r22, r22
 458:	77 1f       	adc	r23, r23
 45a:	88 1f       	adc	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	1a 94       	dec	r1
 460:	69 f7       	brne	.-38     	; 0x43c <__udivmodsi4_loop>
 462:	60 95       	com	r22
 464:	70 95       	com	r23
 466:	80 95       	com	r24
 468:	90 95       	com	r25
 46a:	9b 01       	movw	r18, r22
 46c:	ac 01       	movw	r20, r24
 46e:	bd 01       	movw	r22, r26
 470:	cf 01       	movw	r24, r30
 472:	08 95       	ret

00000474 <_exit>:
 474:	f8 94       	cli

00000476 <__stop_program>:
 476:	ff cf       	rjmp	.-2      	; 0x476 <__stop_program>
