
MOTOR_SPEED_CONTROL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b7c  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000861  00000000  00000000  00000e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000039a  00000000  00000000  000016b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001a50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043d  00000000  00000000  00001a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000026e  00000000  00000000  00001ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000213f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	1e d0       	rcall	.+60     	; 0xd6 <main>
  9a:	a3 c0       	rjmp	.+326    	; 0x1e2 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <setDutyRate>:

#define MOTOR_PORT PORTB
#define MOTOR_DDR DDRB

unsigned int setDutyRate (unsigned int percentage) {
	return (255 * percentage / 100);
  9e:	4f ef       	ldi	r20, 0xFF	; 255
  a0:	9c 01       	movw	r18, r24
  a2:	42 9f       	mul	r20, r18
  a4:	c0 01       	movw	r24, r0
  a6:	43 9f       	mul	r20, r19
  a8:	90 0d       	add	r25, r0
  aa:	11 24       	eor	r1, r1
  ac:	9c 01       	movw	r18, r24
  ae:	36 95       	lsr	r19
  b0:	27 95       	ror	r18
  b2:	36 95       	lsr	r19
  b4:	27 95       	ror	r18
  b6:	ab e7       	ldi	r26, 0x7B	; 123
  b8:	b4 e1       	ldi	r27, 0x14	; 20
  ba:	84 d0       	rcall	.+264    	; 0x1c4 <__umulhisi3>
}
  bc:	96 95       	lsr	r25
  be:	87 95       	ror	r24
  c0:	08 95       	ret

000000c2 <Motor_Init>:

void Motor_Init(){
	MOTOR_DDR |= 0x80;
  c2:	87 b3       	in	r24, 0x17	; 23
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	87 bb       	out	0x17, r24	; 23
	MOTOR_PORT &= ~(0x80);
  c8:	88 b3       	in	r24, 0x18	; 24
  ca:	8f 77       	andi	r24, 0x7F	; 127
  cc:	88 bb       	out	0x18, r24	; 24
	// 8bit Timer / Counter2 with PWM
	// Phase Correct PWM, No Prascaling, non-inverting mode
	TCCR2 = 0x61;	// Set PWM
  ce:	81 e6       	ldi	r24, 0x61	; 97
  d0:	85 bd       	out	0x25, r24	; 37
	TCNT2 = 0;
  d2:	14 bc       	out	0x24, r1	; 36
  d4:	08 95       	ret

000000d6 <main>:
}

int main(void) {
	Motor_Init();
  d6:	f5 df       	rcall	.-22     	; 0xc2 <Motor_Init>
	
	while(1) {
		OCR2 = setDutyRate(0);	_delay_ms(2000);
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	e0 df       	rcall	.-64     	; 0x9e <setDutyRate>
  de:	83 bd       	out	0x23, r24	; 35
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	99 e5       	ldi	r25, 0x59	; 89
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x10>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x1a>
  f0:	00 00       	nop
		OCR2 = setDutyRate(10);	_delay_ms(2000);
  f2:	8a e0       	ldi	r24, 0x0A	; 10
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	d3 df       	rcall	.-90     	; 0x9e <setDutyRate>
  f8:	83 bd       	out	0x23, r24	; 35
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	99 e5       	ldi	r25, 0x59	; 89
 100:	21 50       	subi	r18, 0x01	; 1
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x2a>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x34>
		OCR2 = setDutyRate(20);	_delay_ms(2000);
 10a:	00 00       	nop
 10c:	84 e1       	ldi	r24, 0x14	; 20
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	c6 df       	rcall	.-116    	; 0x9e <setDutyRate>
 112:	83 bd       	out	0x23, r24	; 35
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	99 e5       	ldi	r25, 0x59	; 89
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	80 40       	sbci	r24, 0x00	; 0
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x44>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x4e>
		OCR2 = setDutyRate(30);	_delay_ms(2000);
 124:	00 00       	nop
 126:	8e e1       	ldi	r24, 0x1E	; 30
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	b9 df       	rcall	.-142    	; 0x9e <setDutyRate>
 12c:	83 bd       	out	0x23, r24	; 35
 12e:	2f ef       	ldi	r18, 0xFF	; 255
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	99 e5       	ldi	r25, 0x59	; 89
 134:	21 50       	subi	r18, 0x01	; 1
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0x5e>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0x68>
		OCR2 = setDutyRate(50);	_delay_ms(2000);
 13e:	00 00       	nop
 140:	82 e3       	ldi	r24, 0x32	; 50
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	ac df       	rcall	.-168    	; 0x9e <setDutyRate>
 146:	83 bd       	out	0x23, r24	; 35
 148:	2f ef       	ldi	r18, 0xFF	; 255
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	99 e5       	ldi	r25, 0x59	; 89
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	80 40       	sbci	r24, 0x00	; 0
 152:	90 40       	sbci	r25, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <main+0x78>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0x82>
		OCR2 = setDutyRate(70);	_delay_ms(2000);
 158:	00 00       	nop
 15a:	86 e4       	ldi	r24, 0x46	; 70
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	9f df       	rcall	.-194    	; 0x9e <setDutyRate>
 160:	83 bd       	out	0x23, r24	; 35
 162:	2f ef       	ldi	r18, 0xFF	; 255
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	99 e5       	ldi	r25, 0x59	; 89
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <main+0x92>
 170:	00 c0       	rjmp	.+0      	; 0x172 <main+0x9c>
		OCR2 = setDutyRate(80);	_delay_ms(2000);
 172:	00 00       	nop
 174:	80 e5       	ldi	r24, 0x50	; 80
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	92 df       	rcall	.-220    	; 0x9e <setDutyRate>
 17a:	83 bd       	out	0x23, r24	; 35
 17c:	2f ef       	ldi	r18, 0xFF	; 255
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	99 e5       	ldi	r25, 0x59	; 89
 182:	21 50       	subi	r18, 0x01	; 1
 184:	80 40       	sbci	r24, 0x00	; 0
 186:	90 40       	sbci	r25, 0x00	; 0
 188:	e1 f7       	brne	.-8      	; 0x182 <main+0xac>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <main+0xb6>
		OCR2 = setDutyRate(90);	_delay_ms(2000);
 18c:	00 00       	nop
 18e:	8a e5       	ldi	r24, 0x5A	; 90
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	85 df       	rcall	.-246    	; 0x9e <setDutyRate>
 194:	83 bd       	out	0x23, r24	; 35
 196:	2f ef       	ldi	r18, 0xFF	; 255
 198:	8f ef       	ldi	r24, 0xFF	; 255
 19a:	99 e5       	ldi	r25, 0x59	; 89
 19c:	21 50       	subi	r18, 0x01	; 1
 19e:	80 40       	sbci	r24, 0x00	; 0
 1a0:	90 40       	sbci	r25, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0xc6>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0xd0>
		OCR2 = setDutyRate(100);_delay_ms(2000);
 1a6:	00 00       	nop
 1a8:	84 e6       	ldi	r24, 0x64	; 100
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	78 df       	rcall	.-272    	; 0x9e <setDutyRate>
 1ae:	83 bd       	out	0x23, r24	; 35
 1b0:	2f ef       	ldi	r18, 0xFF	; 255
 1b2:	8f ef       	ldi	r24, 0xFF	; 255
 1b4:	99 e5       	ldi	r25, 0x59	; 89
 1b6:	21 50       	subi	r18, 0x01	; 1
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	90 40       	sbci	r25, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <main+0xe0>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <main+0xea>
 1c0:	00 00       	nop
 1c2:	8a cf       	rjmp	.-236    	; 0xd8 <main+0x2>

000001c4 <__umulhisi3>:
 1c4:	a2 9f       	mul	r26, r18
 1c6:	b0 01       	movw	r22, r0
 1c8:	b3 9f       	mul	r27, r19
 1ca:	c0 01       	movw	r24, r0
 1cc:	a3 9f       	mul	r26, r19
 1ce:	70 0d       	add	r23, r0
 1d0:	81 1d       	adc	r24, r1
 1d2:	11 24       	eor	r1, r1
 1d4:	91 1d       	adc	r25, r1
 1d6:	b2 9f       	mul	r27, r18
 1d8:	70 0d       	add	r23, r0
 1da:	81 1d       	adc	r24, r1
 1dc:	11 24       	eor	r1, r1
 1de:	91 1d       	adc	r25, r1
 1e0:	08 95       	ret

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
