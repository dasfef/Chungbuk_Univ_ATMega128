
SWITCH_TO_CLOCK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000003a4  00000438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800110  00800110  00000448  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000478  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a2f  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000895  00000000  00000000  00000f23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000042c  00000000  00000000  000017b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  00001be4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044f  00000000  00000000  00001c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000125  00000000  00000000  000020ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000021d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ea       	ldi	r30, 0xA4	; 164
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 31       	cpi	r26, 0x1E	; 30
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	42 d1       	rcall	.+644    	; 0x348 <main>
  c4:	6d c1       	rjmp	.+730    	; 0x3a0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <CPU_Setup>:
signed int C;
unsigned char newKey;
unsigned char oldKey;

void CPU_Setup( ) {
	DDRB=0xff;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	87 bb       	out	0x17, r24	; 23
	DDRE=0xff;
  cc:	82 b9       	out	0x02, r24	; 2
	DDRC=0x00;
  ce:	14 ba       	out	0x14, r1	; 20
	DDRD=0x00;
  d0:	11 ba       	out	0x11, r1	; 17
  d2:	08 95       	ret

000000d4 <KeyIn>:
}

unsigned char KeyIn() {
	unsigned char Key = ~SWITCH1;
  d4:	80 b3       	in	r24, 0x10	; 16
  d6:	80 95       	com	r24
	for (int k = 0; k < 100; k++) {
  d8:	40 e0       	ldi	r20, 0x00	; 0
  da:	50 e0       	ldi	r21, 0x00	; 0
  dc:	07 c0       	rjmp	.+14     	; 0xec <KeyIn+0x18>
		Key &= ~SWITCH1;
  de:	20 b3       	in	r18, 0x10	; 16
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	20 95       	com	r18
  e4:	30 95       	com	r19
  e6:	82 23       	and	r24, r18
	DDRD=0x00;
}

unsigned char KeyIn() {
	unsigned char Key = ~SWITCH1;
	for (int k = 0; k < 100; k++) {
  e8:	4f 5f       	subi	r20, 0xFF	; 255
  ea:	5f 4f       	sbci	r21, 0xFF	; 255
  ec:	44 36       	cpi	r20, 0x64	; 100
  ee:	51 05       	cpc	r21, r1
  f0:	b4 f3       	brlt	.-20     	; 0xde <KeyIn+0xa>
		Key &= ~SWITCH1;
	}
	return Key;
}
  f2:	08 95       	ret

000000f4 <KeyProc>:

void KeyProc() {
  f4:	cf 93       	push	r28
	unsigned char tKey = KeyIn();
  f6:	ee df       	rcall	.-36     	; 0xd4 <KeyIn>
  f8:	c8 2f       	mov	r28, r24
	newKey = KeyIn();
  fa:	ec df       	rcall	.-40     	; 0xd4 <KeyIn>
  fc:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <newKey>
 100:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <oldKey>
	if(newKey != oldKey){
 104:	89 17       	cp	r24, r25
 106:	09 f4       	brne	.+2      	; 0x10a <KeyProc+0x16>
 108:	7e c0       	rjmp	.+252    	; 0x206 <KeyProc+0x112>
 10a:	c4 30       	cpi	r28, 0x04	; 4
		switch (tKey) {
 10c:	b1 f1       	breq	.+108    	; 0x17a <KeyProc+0x86>
 10e:	28 f4       	brcc	.+10     	; 0x11a <KeyProc+0x26>
 110:	c1 30       	cpi	r28, 0x01	; 1
 112:	69 f0       	breq	.+26     	; 0x12e <KeyProc+0x3a>
 114:	c2 30       	cpi	r28, 0x02	; 2
 116:	f1 f0       	breq	.+60     	; 0x154 <KeyProc+0x60>
 118:	74 c0       	rjmp	.+232    	; 0x202 <KeyProc+0x10e>
 11a:	c0 32       	cpi	r28, 0x20	; 32
 11c:	09 f4       	brne	.+2      	; 0x120 <KeyProc+0x2c>
 11e:	50 c0       	rjmp	.+160    	; 0x1c0 <KeyProc+0xcc>
 120:	c0 34       	cpi	r28, 0x40	; 64
 122:	09 f4       	brne	.+2      	; 0x126 <KeyProc+0x32>
 124:	5e c0       	rjmp	.+188    	; 0x1e2 <KeyProc+0xee>
 126:	c0 31       	cpi	r28, 0x10	; 16
 128:	09 f0       	breq	.+2      	; 0x12c <KeyProc+0x38>
 12a:	6b c0       	rjmp	.+214    	; 0x202 <KeyProc+0x10e>
 12c:	38 c0       	rjmp	.+112    	; 0x19e <KeyProc+0xaa>
 12e:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <A>
			case 0x01: if(++A > 23) A=0; break;
 132:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <A+0x1>
 136:	2f 5f       	subi	r18, 0xFF	; 255
 138:	3f 4f       	sbci	r19, 0xFF	; 255
 13a:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <A+0x1>
 13e:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <A>
 142:	28 31       	cpi	r18, 0x18	; 24
 144:	31 05       	cpc	r19, r1
 146:	0c f4       	brge	.+2      	; 0x14a <KeyProc+0x56>
 148:	5c c0       	rjmp	.+184    	; 0x202 <KeyProc+0x10e>
 14a:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <A+0x1>
 14e:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <A>
 152:	57 c0       	rjmp	.+174    	; 0x202 <KeyProc+0x10e>
 154:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <B>
			case 0x02: if(++B > 59) B=0; break;
 158:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <B+0x1>
 15c:	2f 5f       	subi	r18, 0xFF	; 255
 15e:	3f 4f       	sbci	r19, 0xFF	; 255
 160:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <B+0x1>
 164:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <B>
 168:	2c 33       	cpi	r18, 0x3C	; 60
 16a:	31 05       	cpc	r19, r1
 16c:	0c f4       	brge	.+2      	; 0x170 <KeyProc+0x7c>
 16e:	49 c0       	rjmp	.+146    	; 0x202 <KeyProc+0x10e>
 170:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <B+0x1>
 174:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <B>
 178:	44 c0       	rjmp	.+136    	; 0x202 <KeyProc+0x10e>
 17a:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <C>
			case 0x04: if(++C > 59) C=0; break;
 17e:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <C+0x1>
 182:	2f 5f       	subi	r18, 0xFF	; 255
 184:	3f 4f       	sbci	r19, 0xFF	; 255
 186:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <C+0x1>
 18a:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <C>
 18e:	2c 33       	cpi	r18, 0x3C	; 60
 190:	31 05       	cpc	r19, r1
 192:	bc f1       	brlt	.+110    	; 0x202 <KeyProc+0x10e>
 194:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <C+0x1>
 198:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <C>
 19c:	32 c0       	rjmp	.+100    	; 0x202 <KeyProc+0x10e>
 19e:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <A>
			
			case 0x10: if(--A < 0) A=0; break;
 1a2:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <A+0x1>
 1a6:	21 50       	subi	r18, 0x01	; 1
 1a8:	31 09       	sbc	r19, r1
 1aa:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <A+0x1>
 1ae:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <A>
 1b2:	33 23       	and	r19, r19
 1b4:	34 f5       	brge	.+76     	; 0x202 <KeyProc+0x10e>
 1b6:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <A+0x1>
 1ba:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <A>
 1be:	21 c0       	rjmp	.+66     	; 0x202 <KeyProc+0x10e>
 1c0:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <B>
			case 0x20: if(--B < 0) B=0; break;
 1c4:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <B+0x1>
 1c8:	21 50       	subi	r18, 0x01	; 1
 1ca:	31 09       	sbc	r19, r1
 1cc:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <B+0x1>
 1d0:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <B>
 1d4:	33 23       	and	r19, r19
 1d6:	ac f4       	brge	.+42     	; 0x202 <KeyProc+0x10e>
 1d8:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <B+0x1>
 1dc:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <B>
 1e0:	10 c0       	rjmp	.+32     	; 0x202 <KeyProc+0x10e>
 1e2:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <C>
			case 0x40: if(--C < 0) C=0; break;
 1e6:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <C+0x1>
 1ea:	21 50       	subi	r18, 0x01	; 1
 1ec:	31 09       	sbc	r19, r1
 1ee:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <C+0x1>
 1f2:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <C>
 1f6:	33 23       	and	r19, r19
 1f8:	24 f4       	brge	.+8      	; 0x202 <KeyProc+0x10e>
 1fa:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <C+0x1>
 1fe:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <C>
 202:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <oldKey>
		}
		oldKey = newKey;
 206:	cf 91       	pop	r28
	}
	
}
 208:	08 95       	ret

0000020a <Hex2Dec>:
 20a:	cf 93       	push	r28

void Hex2Dec() {
 20c:	df 93       	push	r29
	unsigned int tmp = A;
 20e:	c0 91 16 01 	lds	r28, 0x0116	; 0x800116 <A>
 212:	d0 91 17 01 	lds	r29, 0x0117	; 0x800117 <A+0x1>
	NUM[5] = tmp / 10;
 216:	9e 01       	movw	r18, r28
 218:	ad ec       	ldi	r26, 0xCD	; 205
 21a:	bc ec       	ldi	r27, 0xCC	; 204
 21c:	b2 d0       	rcall	.+356    	; 0x382 <__umulhisi3>
 21e:	ac 01       	movw	r20, r24
 220:	56 95       	lsr	r21
 222:	47 95       	ror	r20
 224:	56 95       	lsr	r21
 226:	47 95       	ror	r20
 228:	56 95       	lsr	r21
 22a:	47 95       	ror	r20
 22c:	e0 e1       	ldi	r30, 0x10	; 16
 22e:	f1 e0       	ldi	r31, 0x01	; 1
 230:	45 83       	std	Z+5, r20	; 0x05
	tmp = tmp % 10;
 232:	ca 01       	movw	r24, r20
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	44 0f       	add	r20, r20
 23a:	55 1f       	adc	r21, r21
 23c:	44 0f       	add	r20, r20
 23e:	55 1f       	adc	r21, r21
 240:	44 0f       	add	r20, r20
 242:	55 1f       	adc	r21, r21
 244:	48 0f       	add	r20, r24
 246:	59 1f       	adc	r21, r25
 248:	c4 1b       	sub	r28, r20
 24a:	d5 0b       	sbc	r29, r21
	NUM[4] = tmp % 10;
 24c:	9e 01       	movw	r18, r28
 24e:	99 d0       	rcall	.+306    	; 0x382 <__umulhisi3>
 250:	96 95       	lsr	r25
 252:	87 95       	ror	r24
 254:	96 95       	lsr	r25
 256:	87 95       	ror	r24
 258:	96 95       	lsr	r25
 25a:	87 95       	ror	r24
 25c:	9c 01       	movw	r18, r24
 25e:	22 0f       	add	r18, r18
 260:	33 1f       	adc	r19, r19
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	82 0f       	add	r24, r18
 270:	93 1f       	adc	r25, r19
 272:	9e 01       	movw	r18, r28
 274:	28 1b       	sub	r18, r24
 276:	39 0b       	sbc	r19, r25
 278:	24 83       	std	Z+4, r18	; 0x04
	
	tmp = B;
 27a:	c0 91 18 01 	lds	r28, 0x0118	; 0x800118 <B>
 27e:	d0 91 19 01 	lds	r29, 0x0119	; 0x800119 <B+0x1>
	NUM[3] = tmp / 10;
 282:	9e 01       	movw	r18, r28
 284:	7e d0       	rcall	.+252    	; 0x382 <__umulhisi3>
 286:	ac 01       	movw	r20, r24
 288:	56 95       	lsr	r21
 28a:	47 95       	ror	r20
 28c:	56 95       	lsr	r21
 28e:	47 95       	ror	r20
 290:	56 95       	lsr	r21
 292:	47 95       	ror	r20
 294:	43 83       	std	Z+3, r20	; 0x03
	tmp = tmp % 10;
 296:	ca 01       	movw	r24, r20
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	44 0f       	add	r20, r20
 29e:	55 1f       	adc	r21, r21
 2a0:	44 0f       	add	r20, r20
 2a2:	55 1f       	adc	r21, r21
 2a4:	44 0f       	add	r20, r20
 2a6:	55 1f       	adc	r21, r21
 2a8:	48 0f       	add	r20, r24
 2aa:	59 1f       	adc	r21, r25
 2ac:	c4 1b       	sub	r28, r20
	NUM[2] = tmp % 10;
 2ae:	d5 0b       	sbc	r29, r21
 2b0:	9e 01       	movw	r18, r28
 2b2:	67 d0       	rcall	.+206    	; 0x382 <__umulhisi3>
 2b4:	96 95       	lsr	r25
 2b6:	87 95       	ror	r24
 2b8:	96 95       	lsr	r25
 2ba:	87 95       	ror	r24
 2bc:	96 95       	lsr	r25
 2be:	87 95       	ror	r24
 2c0:	9c 01       	movw	r18, r24
 2c2:	22 0f       	add	r18, r18
 2c4:	33 1f       	adc	r19, r19
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	88 0f       	add	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	82 0f       	add	r24, r18
 2d4:	93 1f       	adc	r25, r19
 2d6:	9e 01       	movw	r18, r28
 2d8:	28 1b       	sub	r18, r24
 2da:	39 0b       	sbc	r19, r25
 2dc:	22 83       	std	Z+2, r18	; 0x02

	tmp = C;
 2de:	c0 91 1a 01 	lds	r28, 0x011A	; 0x80011a <C>
 2e2:	d0 91 1b 01 	lds	r29, 0x011B	; 0x80011b <C+0x1>
	NUM[1] = tmp / 10;
 2e6:	9e 01       	movw	r18, r28
 2e8:	4c d0       	rcall	.+152    	; 0x382 <__umulhisi3>
 2ea:	ac 01       	movw	r20, r24
 2ec:	56 95       	lsr	r21
 2ee:	47 95       	ror	r20
 2f0:	56 95       	lsr	r21
 2f2:	47 95       	ror	r20
 2f4:	56 95       	lsr	r21
 2f6:	47 95       	ror	r20
 2f8:	41 83       	std	Z+1, r20	; 0x01
	tmp = tmp % 10;
 2fa:	ca 01       	movw	r24, r20
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	44 0f       	add	r20, r20
 302:	55 1f       	adc	r21, r21
 304:	44 0f       	add	r20, r20
 306:	55 1f       	adc	r21, r21
 308:	44 0f       	add	r20, r20
 30a:	55 1f       	adc	r21, r21
 30c:	48 0f       	add	r20, r24
 30e:	59 1f       	adc	r21, r25
 310:	c4 1b       	sub	r28, r20
	NUM[0] = tmp % 10;
 312:	d5 0b       	sbc	r29, r21
 314:	9e 01       	movw	r18, r28
 316:	35 d0       	rcall	.+106    	; 0x382 <__umulhisi3>
 318:	96 95       	lsr	r25
 31a:	87 95       	ror	r24
 31c:	96 95       	lsr	r25
 31e:	87 95       	ror	r24
 320:	96 95       	lsr	r25
 322:	87 95       	ror	r24
 324:	9c 01       	movw	r18, r24
 326:	22 0f       	add	r18, r18
 328:	33 1f       	adc	r19, r19
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	82 0f       	add	r24, r18
 338:	93 1f       	adc	r25, r19
 33a:	9e 01       	movw	r18, r28
 33c:	28 1b       	sub	r18, r24
 33e:	39 0b       	sbc	r19, r25
 340:	20 83       	st	Z, r18
	
	
}
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	08 95       	ret

00000348 <main>:

int main(void) {
	CPU_Setup();
 348:	bf de       	rcall	.-642    	; 0xc8 <CPU_Setup>
	
	while(1) {
		for (unsigned char k = 0; k < 6; k++){
 34a:	20 e0       	ldi	r18, 0x00	; 0
 34c:	15 c0       	rjmp	.+42     	; 0x378 <main+0x30>
			FND_SEL = DGT[k];
 34e:	82 2f       	mov	r24, r18
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	fc 01       	movw	r30, r24
 354:	e0 50       	subi	r30, 0x00	; 0
 356:	ff 4f       	sbci	r31, 0xFF	; 255
 358:	30 81       	ld	r19, Z
 35a:	38 bb       	out	0x18, r19	; 24
			FND_DB = FND[NUM[k]];
 35c:	fc 01       	movw	r30, r24
 35e:	e0 5f       	subi	r30, 0xF0	; 240
 360:	fe 4f       	sbci	r31, 0xFE	; 254
 362:	e0 81       	ld	r30, Z
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	ea 5f       	subi	r30, 0xFA	; 250
 368:	fe 4f       	sbci	r31, 0xFE	; 254
 36a:	80 81       	ld	r24, Z
 36c:	83 b9       	out	0x03, r24	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 36e:	83 e3       	ldi	r24, 0x33	; 51
 370:	9b e2       	ldi	r25, 0x2B	; 43
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <main+0x2a>

int main(void) {
	CPU_Setup();
	
	while(1) {
		for (unsigned char k = 0; k < 6; k++){
 376:	2f 5f       	subi	r18, 0xFF	; 255
 378:	26 30       	cpi	r18, 0x06	; 6
			FND_SEL = DGT[k];
			FND_DB = FND[NUM[k]];
			_delay_ms(dTime);
		}
		KeyProc();
 37a:	48 f3       	brcs	.-46     	; 0x34e <main+0x6>
		Hex2Dec();
 37c:	bb de       	rcall	.-650    	; 0xf4 <KeyProc>
 37e:	45 df       	rcall	.-374    	; 0x20a <Hex2Dec>
	}
 380:	e4 cf       	rjmp	.-56     	; 0x34a <main+0x2>

00000382 <__umulhisi3>:
 382:	a2 9f       	mul	r26, r18
 384:	b0 01       	movw	r22, r0
 386:	b3 9f       	mul	r27, r19
 388:	c0 01       	movw	r24, r0
 38a:	a3 9f       	mul	r26, r19
 38c:	70 0d       	add	r23, r0
 38e:	81 1d       	adc	r24, r1
 390:	11 24       	eor	r1, r1
 392:	91 1d       	adc	r25, r1
 394:	b2 9f       	mul	r27, r18
 396:	70 0d       	add	r23, r0
 398:	81 1d       	adc	r24, r1
 39a:	11 24       	eor	r1, r1
 39c:	91 1d       	adc	r25, r1
 39e:	08 95       	ret

000003a0 <_exit>:
 3a0:	f8 94       	cli

000003a2 <__stop_program>:
 3a2:	ff cf       	rjmp	.-2      	; 0x3a2 <__stop_program>
