
IR_REMOTE_TO_FAN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  0000039a  0000042e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000039a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800118  00800118  00000446  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000446  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000478  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c4a  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000091b  00000000  00000000  00001186  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005d7  00000000  00000000  00001aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00002078  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050c  00000000  00000000  000021a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000238  00000000  00000000  000026ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000028e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	6f c0       	rjmp	.+222    	; 0xe4 <__vector_1>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e9       	ldi	r30, 0x9A	; 154
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 31       	cpi	r26, 0x18	; 24
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e1       	ldi	r26, 0x18	; 24
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 32       	cpi	r26, 0x29	; 41
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	44 d1       	rcall	.+648    	; 0x34c <main>
  c4:	68 c1       	rjmp	.+720    	; 0x396 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:
unsigned char get_IR_Code (void) {
	return IR_Code[2];
}

void clear_IR_Code (void) {
	IR_Code[2] = 0;
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	f8 94       	cli
  d4:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <IR_State>
  d8:	78 94       	sei
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <__vector_1>:
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	0b b6       	in	r0, 0x3b	; 59
  f0:	0f 92       	push	r0
  f2:	2f 93       	push	r18
  f4:	3f 93       	push	r19
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25
  fa:	ef 93       	push	r30
  fc:	ff 93       	push	r31
  fe:	f8 94       	cli
 100:	82 b7       	in	r24, 0x32	; 50
 102:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <IR_TimeCount>
 106:	12 be       	out	0x32, r1	; 50
 108:	78 94       	sei
 10a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <IR_State>
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	51 f0       	breq	.+20     	; 0x126 <__vector_1+0x42>
 112:	18 f0       	brcs	.+6      	; 0x11a <__vector_1+0x36>
 114:	82 30       	cpi	r24, 0x02	; 2
 116:	e1 f0       	breq	.+56     	; 0x150 <__vector_1+0x6c>
 118:	6f c0       	rjmp	.+222    	; 0x1f8 <__vector_1+0x114>
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <IR_State>
 120:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <IR_TimeCount>
 124:	69 c0       	rjmp	.+210    	; 0x1f8 <__vector_1+0x114>
 126:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <IR_TimeCount>
 12a:	8f 3a       	cpi	r24, 0xAF	; 175
 12c:	70 f0       	brcs	.+28     	; 0x14a <__vector_1+0x66>
 12e:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <IR_TimeCount>
 132:	89 3d       	cpi	r24, 0xD9	; 217
 134:	50 f4       	brcc	.+20     	; 0x14a <__vector_1+0x66>
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <IR_State>
 13c:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <IR_TimeCount>
 140:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <IR_BitCount>
 144:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <IR_RxBit>
 148:	57 c0       	rjmp	.+174    	; 0x1f8 <__vector_1+0x114>
 14a:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <IR_State>
 14e:	54 c0       	rjmp	.+168    	; 0x1f8 <__vector_1+0x114>
 150:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <IR_RxBit>
 154:	86 95       	lsr	r24
 156:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <IR_RxBit>
 15a:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <IR_TimeCount>
 15e:	8d 30       	cpi	r24, 0x0D	; 13
 160:	50 f0       	brcs	.+20     	; 0x176 <__vector_1+0x92>
 162:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <IR_TimeCount>
 166:	84 31       	cpi	r24, 0x14	; 20
 168:	30 f4       	brcc	.+12     	; 0x176 <__vector_1+0x92>
 16a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <IR_RxBit>
 16e:	8f 77       	andi	r24, 0x7F	; 127
 170:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <IR_RxBit>
 174:	10 c0       	rjmp	.+32     	; 0x196 <__vector_1+0xb2>
 176:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <IR_TimeCount>
 17a:	8c 31       	cpi	r24, 0x1C	; 28
 17c:	50 f0       	brcs	.+20     	; 0x192 <__vector_1+0xae>
 17e:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <IR_TimeCount>
 182:	86 32       	cpi	r24, 0x26	; 38
 184:	30 f4       	brcc	.+12     	; 0x192 <__vector_1+0xae>
 186:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <IR_RxBit>
 18a:	80 68       	ori	r24, 0x80	; 128
 18c:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <IR_RxBit>
 190:	02 c0       	rjmp	.+4      	; 0x196 <__vector_1+0xb2>
 192:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <IR_State>
 196:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <IR_TimeCount>
 19a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <IR_BitCount>
 19e:	8f 5f       	subi	r24, 0xFF	; 255
 1a0:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <IR_BitCount>
 1a4:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <IR_BitCount>
 1a8:	87 70       	andi	r24, 0x07	; 7
 1aa:	69 f4       	brne	.+26     	; 0x1c6 <__vector_1+0xe2>
 1ac:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <IR_BitCount>
 1b0:	e6 95       	lsr	r30
 1b2:	e6 95       	lsr	r30
 1b4:	e6 95       	lsr	r30
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <IR_RxBit>
 1bc:	ed 5d       	subi	r30, 0xDD	; 221
 1be:	fe 4f       	sbci	r31, 0xFE	; 254
 1c0:	80 83       	st	Z, r24
 1c2:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <IR_RxBit>
 1c6:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <IR_BitCount>
 1ca:	80 32       	cpi	r24, 0x20	; 32
 1cc:	a9 f4       	brne	.+42     	; 0x1f8 <__vector_1+0x114>
 1ce:	e4 e2       	ldi	r30, 0x24	; 36
 1d0:	f1 e0       	ldi	r31, 0x01	; 1
 1d2:	82 81       	ldd	r24, Z+2	; 0x02
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	80 95       	com	r24
 1d8:	90 95       	com	r25
 1da:	99 27       	eor	r25, r25
 1dc:	23 81       	ldd	r18, Z+3	; 0x03
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	82 17       	cp	r24, r18
 1e2:	93 07       	cpc	r25, r19
 1e4:	29 f4       	brne	.+10     	; 0x1f0 <__vector_1+0x10c>
 1e6:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <IR_State>
 1ea:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <IR_BitCount>
 1ee:	04 c0       	rjmp	.+8      	; 0x1f8 <__vector_1+0x114>
 1f0:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <IR_State>
 1f4:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <IR_BitCount>
 1f8:	78 94       	sei
 1fa:	ff 91       	pop	r31
 1fc:	ef 91       	pop	r30
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	3f 91       	pop	r19
 204:	2f 91       	pop	r18
 206:	0f 90       	pop	r0
 208:	0b be       	out	0x3b, r0	; 59
 20a:	0f 90       	pop	r0
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	0f 90       	pop	r0
 210:	1f 90       	pop	r1
 212:	18 95       	reti

00000214 <get_IR_Code>:
 214:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <IR_Code+0x2>
 218:	08 95       	ret

0000021a <Ext_Int0_Init>:
}

void Ext_Int0_Init() {
	// External Interrupt 0 Enable : PORTD.0
	EICRA	|=	0x02;	// falling edge
 21a:	ea e6       	ldi	r30, 0x6A	; 106
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	82 60       	ori	r24, 0x02	; 2
 222:	80 83       	st	Z, r24
	EICRB	|=	0x00;
 224:	8a b7       	in	r24, 0x3a	; 58
 226:	8a bf       	out	0x3a, r24	; 58
	EIMSK	|=	0x01;
 228:	89 b7       	in	r24, 0x39	; 57
 22a:	81 60       	ori	r24, 0x01	; 1
 22c:	89 bf       	out	0x39, r24	; 57
	EIFR	|=	0x01;
 22e:	88 b7       	in	r24, 0x38	; 56
 230:	81 60       	ori	r24, 0x01	; 1
 232:	88 bf       	out	0x38, r24	; 56
 234:	08 95       	ret

00000236 <Timer0_Init>:
}

void Timer0_Init() {
	// Timer/Counter0 Control register Clock Select(prescaler 1024)
	// 1/(14745600Hz/1024) = 0.000069s
	TCCR0 = 0x07;	// prescaler 1024
 236:	87 e0       	ldi	r24, 0x07	; 7
 238:	83 bf       	out	0x33, r24	; 51

	// TOIE0 = 0x01, (Timer/Counter0 Overflow Interrupt Enable)
	TIMSK = 0x01;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	87 bf       	out	0x37, r24	; 55
 23e:	08 95       	ret

00000240 <IR_Init>:
}

void IR_Init()
{
	IR_DDR = 0x00;
 240:	11 ba       	out	0x11, r1	; 17
	Timer0_Init();
 242:	f9 df       	rcall	.-14     	; 0x236 <Timer0_Init>
	Ext_Int0_Init();
 244:	ea cf       	rjmp	.-44     	; 0x21a <Ext_Int0_Init>
 246:	08 95       	ret

00000248 <CPU_Setup>:
 248:	8f ef       	ldi	r24, 0xFF	; 255
	
unsigned char IR_RxCode;
unsigned char num1, num2;
	
void CPU_Setup() {
	FND_SEL_DDR=0xff;
 24a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	FND_DB_DDR=0xff;
 24e:	8a bb       	out	0x1a, r24	; 26
 250:	08 95       	ret

00000252 <Motor_Init>:
}

void Motor_Init() {
	MOTOR_DDR |= 0x80;
 252:	87 b3       	in	r24, 0x17	; 23
 254:	80 68       	ori	r24, 0x80	; 128
 256:	87 bb       	out	0x17, r24	; 23
	MOTOR_PORT &= ~(0x80);
 258:	88 b3       	in	r24, 0x18	; 24
 25a:	8f 77       	andi	r24, 0x7F	; 127
 25c:	88 bb       	out	0x18, r24	; 24
	TCCR2 = 0x61;
 25e:	81 e6       	ldi	r24, 0x61	; 97
 260:	85 bd       	out	0x25, r24	; 37
	TCNT1 = 0;
 262:	1d bc       	out	0x2d, r1	; 45
 264:	1c bc       	out	0x2c, r1	; 44
 266:	08 95       	ret

00000268 <setDutyRate>:
}

unsigned int setDutyRate (unsigned int percentage) {
	return(255 * percentage / 100);
 268:	4f ef       	ldi	r20, 0xFF	; 255
 26a:	9c 01       	movw	r18, r24
 26c:	42 9f       	mul	r20, r18
 26e:	c0 01       	movw	r24, r0
 270:	43 9f       	mul	r20, r19
 272:	90 0d       	add	r25, r0
 274:	11 24       	eor	r1, r1
 276:	9c 01       	movw	r18, r24
 278:	36 95       	lsr	r19
 27a:	27 95       	ror	r18
 27c:	36 95       	lsr	r19
 27e:	27 95       	ror	r18
 280:	ab e7       	ldi	r26, 0x7B	; 123
 282:	b4 e1       	ldi	r27, 0x14	; 20
 284:	79 d0       	rcall	.+242    	; 0x378 <__umulhisi3>
}
 286:	96 95       	lsr	r25
 288:	87 95       	ror	r24
 28a:	08 95       	ret

0000028c <Hex2Round>:

void Hex2Round(char num) {
	
	switch(num) {
 28c:	86 31       	cpi	r24, 0x16	; 22
 28e:	49 f0       	breq	.+18     	; 0x2a2 <Hex2Round+0x16>
 290:	18 f4       	brcc	.+6      	; 0x298 <Hex2Round+0xc>
 292:	8c 30       	cpi	r24, 0x0C	; 12
 294:	59 f0       	breq	.+22     	; 0x2ac <Hex2Round+0x20>
 296:	19 c0       	rjmp	.+50     	; 0x2ca <Hex2Round+0x3e>
 298:	88 31       	cpi	r24, 0x18	; 24
 29a:	69 f0       	breq	.+26     	; 0x2b6 <Hex2Round+0x2a>
 29c:	8e 35       	cpi	r24, 0x5E	; 94
 29e:	81 f0       	breq	.+32     	; 0x2c0 <Hex2Round+0x34>
 2a0:	14 c0       	rjmp	.+40     	; 0x2ca <Hex2Round+0x3e>
		case 0x16: OCR2=setDutyRate(0); break;
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	e0 df       	rcall	.-64     	; 0x268 <setDutyRate>
 2a8:	83 bd       	out	0x23, r24	; 35
 2aa:	08 95       	ret
		case 0x0c: OCR2=setDutyRate(70); break;
 2ac:	86 e4       	ldi	r24, 0x46	; 70
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	db df       	rcall	.-74     	; 0x268 <setDutyRate>
 2b2:	83 bd       	out	0x23, r24	; 35
 2b4:	08 95       	ret
		case 0x18: OCR2=setDutyRate(80); break;
 2b6:	80 e5       	ldi	r24, 0x50	; 80
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	d6 df       	rcall	.-84     	; 0x268 <setDutyRate>
 2bc:	83 bd       	out	0x23, r24	; 35
 2be:	08 95       	ret
		case 0x5e: OCR2=setDutyRate(100); break;
 2c0:	84 e6       	ldi	r24, 0x64	; 100
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	d1 df       	rcall	.-94     	; 0x268 <setDutyRate>
 2c6:	83 bd       	out	0x23, r24	; 35
 2c8:	08 95       	ret
		default: OCR2=setDutyRate(0); break;
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	cc df       	rcall	.-104    	; 0x268 <setDutyRate>
 2d0:	83 bd       	out	0x23, r24	; 35
 2d2:	08 95       	ret

000002d4 <FND_Display>:
 2d4:	80 e0       	ldi	r24, 0x00	; 0
	else OCR2=setDutyRate(0);
	*/
}

void FND_Display() {
	for(unsigned char k=0; k<2; k++){
 2d6:	18 c0       	rjmp	.+48     	; 0x308 <FND_Display+0x34>
		FND_SEL=DGT[k];
 2d8:	28 2f       	mov	r18, r24
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	f9 01       	movw	r30, r18
 2de:	e0 50       	subi	r30, 0x00	; 0
 2e0:	ff 4f       	sbci	r31, 0xFF	; 255
 2e2:	90 81       	ld	r25, Z
 2e4:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DB=FND[NUM[k]];
 2e8:	f9 01       	movw	r30, r18
 2ea:	e8 5e       	subi	r30, 0xE8	; 232
 2ec:	fe 4f       	sbci	r31, 0xFE	; 254
 2ee:	e0 81       	ld	r30, Z
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	ea 5f       	subi	r30, 0xFA	; 250
 2f4:	fe 4f       	sbci	r31, 0xFE	; 254
 2f6:	90 81       	ld	r25, Z
 2f8:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fa:	ef ef       	ldi	r30, 0xFF	; 255
 2fc:	ff e8       	ldi	r31, 0x8F	; 143
 2fe:	31 97       	sbiw	r30, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <FND_Display+0x2a>
 302:	00 c0       	rjmp	.+0      	; 0x304 <FND_Display+0x30>
 304:	00 00       	nop
	else OCR2=setDutyRate(0);
	*/
}

void FND_Display() {
	for(unsigned char k=0; k<2; k++){
 306:	8f 5f       	subi	r24, 0xFF	; 255
 308:	82 30       	cpi	r24, 0x02	; 2
 30a:	30 f3       	brcs	.-52     	; 0x2d8 <FND_Display+0x4>
		FND_SEL=DGT[k];
		FND_DB=FND[NUM[k]];
		_delay_ms(dTime);
	}
}
 30c:	08 95       	ret

0000030e <MotorDrive>:

void MotorDrive(char value) {
	switch(value) {
 30e:	86 31       	cpi	r24, 0x16	; 22
 310:	49 f0       	breq	.+18     	; 0x324 <MotorDrive+0x16>
 312:	18 f4       	brcc	.+6      	; 0x31a <MotorDrive+0xc>
 314:	8c 30       	cpi	r24, 0x0C	; 12
 316:	59 f0       	breq	.+22     	; 0x32e <MotorDrive+0x20>
 318:	08 95       	ret
 31a:	88 31       	cpi	r24, 0x18	; 24
 31c:	69 f0       	breq	.+26     	; 0x338 <MotorDrive+0x2a>
 31e:	8e 35       	cpi	r24, 0x5E	; 94
 320:	81 f0       	breq	.+32     	; 0x342 <MotorDrive+0x34>
 322:	08 95       	ret
		case 0x16:		// 리모컨 0
			OCR2=setDutyRate(0);
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	9f df       	rcall	.-194    	; 0x268 <setDutyRate>
 32a:	83 bd       	out	0x23, r24	; 35
			break;
 32c:	08 95       	ret
		case 0x0c:		// 리모컨 1
			OCR2=setDutyRate(70);
 32e:	86 e4       	ldi	r24, 0x46	; 70
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	9a df       	rcall	.-204    	; 0x268 <setDutyRate>
 334:	83 bd       	out	0x23, r24	; 35
			break;
 336:	08 95       	ret
		case 0x18:		// 리모컨 2
			OCR2=setDutyRate(80);
 338:	80 e5       	ldi	r24, 0x50	; 80
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	95 df       	rcall	.-214    	; 0x268 <setDutyRate>
 33e:	83 bd       	out	0x23, r24	; 35
			break;
		case 0x5e:		// 리모컨 3
			OCR2=setDutyRate(100);
 340:	08 95       	ret
 342:	84 e6       	ldi	r24, 0x64	; 100
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	90 df       	rcall	.-224    	; 0x268 <setDutyRate>
 348:	83 bd       	out	0x23, r24	; 35
 34a:	08 95       	ret

0000034c <main>:
			break;
	}
}

int main(void) {
	CPU_Setup();
 34c:	7d df       	rcall	.-262    	; 0x248 <CPU_Setup>
	IR_Init();
 34e:	78 df       	rcall	.-272    	; 0x240 <IR_Init>
	Motor_Init();
 350:	80 df       	rcall	.-256    	; 0x252 <Motor_Init>
	
	sei();
 352:	78 94       	sei
	
	while(1) {
		IR_RxCode = get_IR_Code();
 354:	5f df       	rcall	.-322    	; 0x214 <get_IR_Code>
 356:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <IR_RxCode>
 35a:	e8 e1       	ldi	r30, 0x18	; 24
		
		NUM[1]=(IR_RxCode>>4)&0x0f;
 35c:	f1 e0       	ldi	r31, 0x01	; 1
 35e:	98 2f       	mov	r25, r24
 360:	92 95       	swap	r25
 362:	9f 70       	andi	r25, 0x0F	; 15
 364:	91 83       	std	Z+1, r25	; 0x01
		NUM[0]=(IR_RxCode)&0x0f;
 366:	98 2f       	mov	r25, r24
 368:	9f 70       	andi	r25, 0x0F	; 15
		
		//num1 = ((IR_RxCode>>3) & 0x0f) | ((IR_RxCode>>4) & 0x0f);
		
		Hex2Round(IR_RxCode);
 36a:	90 83       	st	Z, r25
		//Hex2Round(num1, num2);
		FND_Display();
 36c:	8f df       	rcall	.-226    	; 0x28c <Hex2Round>
 36e:	b2 df       	rcall	.-156    	; 0x2d4 <FND_Display>

		MotorDrive(IR_RxCode);
 370:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <IR_RxCode>
 374:	cc df       	rcall	.-104    	; 0x30e <MotorDrive>
 376:	ee cf       	rjmp	.-36     	; 0x354 <main+0x8>

00000378 <__umulhisi3>:
 378:	a2 9f       	mul	r26, r18
 37a:	b0 01       	movw	r22, r0
 37c:	b3 9f       	mul	r27, r19
 37e:	c0 01       	movw	r24, r0
 380:	a3 9f       	mul	r26, r19
 382:	70 0d       	add	r23, r0
 384:	81 1d       	adc	r24, r1
 386:	11 24       	eor	r1, r1
 388:	91 1d       	adc	r25, r1
 38a:	b2 9f       	mul	r27, r18
 38c:	70 0d       	add	r23, r0
 38e:	81 1d       	adc	r24, r1
 390:	11 24       	eor	r1, r1
 392:	91 1d       	adc	r25, r1
 394:	08 95       	ret

00000396 <_exit>:
 396:	f8 94       	cli

00000398 <__stop_program>:
 398:	ff cf       	rjmp	.-2      	; 0x398 <__stop_program>
