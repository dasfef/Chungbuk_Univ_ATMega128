
GccApplication10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000122  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000196  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000083d  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a2  00000000  00000000  00000a69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000269  00000000  00000000  0000120b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001474  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003db  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001883  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	06 d0       	rcall	.+12     	; 0xb6 <main>
  aa:	39 c0       	rjmp	.+114    	; 0x11e <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <CPU_Setup>:

unsigned char Keypad;

void CPU_Setup()
{
	DDRB = 0xff;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	87 bb       	out	0x17, r24	; 23
	DDRA = 0x00;
  b2:	1a ba       	out	0x1a, r1	; 26
  b4:	08 95       	ret

000000b6 <main>:
}

int main(void) 
{
	CPU_Setup();
  b6:	fb df       	rcall	.-10     	; 0xae <CPU_Setup>
	
	while(1) {
		Keypad = ~SWITCH;
  b8:	89 b3       	in	r24, 0x19	; 25
  ba:	80 95       	com	r24
  bc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		else if (Keypad==0x20){ LED_RED=0x3f; }
		else if (Keypad==0x40){ LED_RED=0x7f; }
		else if (Keypad==0x80){ LED_RED=0xff; }
		else { LED_RED=0x00; }*/
			
		switch(Keypad){
  c0:	88 30       	cpi	r24, 0x08	; 8
  c2:	e1 f0       	breq	.+56     	; 0xfc <main+0x46>
  c4:	38 f4       	brcc	.+14     	; 0xd4 <main+0x1e>
  c6:	82 30       	cpi	r24, 0x02	; 2
  c8:	99 f0       	breq	.+38     	; 0xf0 <main+0x3a>
  ca:	84 30       	cpi	r24, 0x04	; 4
  cc:	a1 f0       	breq	.+40     	; 0xf6 <main+0x40>
  ce:	81 30       	cpi	r24, 0x01	; 1
  d0:	21 f5       	brne	.+72     	; 0x11a <main+0x64>
  d2:	0b c0       	rjmp	.+22     	; 0xea <main+0x34>
  d4:	80 32       	cpi	r24, 0x20	; 32
  d6:	c1 f0       	breq	.+48     	; 0x108 <main+0x52>
  d8:	18 f4       	brcc	.+6      	; 0xe0 <main+0x2a>
  da:	80 31       	cpi	r24, 0x10	; 16
  dc:	91 f0       	breq	.+36     	; 0x102 <main+0x4c>
  de:	1d c0       	rjmp	.+58     	; 0x11a <main+0x64>
  e0:	80 34       	cpi	r24, 0x40	; 64
  e2:	a9 f0       	breq	.+42     	; 0x10e <main+0x58>
  e4:	80 38       	cpi	r24, 0x80	; 128
  e6:	b1 f0       	breq	.+44     	; 0x114 <main+0x5e>
  e8:	18 c0       	rjmp	.+48     	; 0x11a <main+0x64>
			case 0x01: LED_RED=0x01; break;
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	88 bb       	out	0x18, r24	; 24
  ee:	e4 cf       	rjmp	.-56     	; 0xb8 <main+0x2>
			case 0x02: LED_RED=0x03; break;
  f0:	83 e0       	ldi	r24, 0x03	; 3
  f2:	88 bb       	out	0x18, r24	; 24
  f4:	e1 cf       	rjmp	.-62     	; 0xb8 <main+0x2>
			case 0x04: LED_RED=0x07; break;
  f6:	87 e0       	ldi	r24, 0x07	; 7
  f8:	88 bb       	out	0x18, r24	; 24
  fa:	de cf       	rjmp	.-68     	; 0xb8 <main+0x2>
			case 0x08: LED_RED=0x0f; break;
  fc:	8f e0       	ldi	r24, 0x0F	; 15
  fe:	88 bb       	out	0x18, r24	; 24
 100:	db cf       	rjmp	.-74     	; 0xb8 <main+0x2>
			case 0x10: LED_RED=0x1f; break;
 102:	8f e1       	ldi	r24, 0x1F	; 31
 104:	88 bb       	out	0x18, r24	; 24
 106:	d8 cf       	rjmp	.-80     	; 0xb8 <main+0x2>
			case 0x20: LED_RED=0x3f; break;
 108:	8f e3       	ldi	r24, 0x3F	; 63
 10a:	88 bb       	out	0x18, r24	; 24
 10c:	d5 cf       	rjmp	.-86     	; 0xb8 <main+0x2>
			case 0x40: LED_RED=0x7f; break;
 10e:	8f e7       	ldi	r24, 0x7F	; 127
 110:	88 bb       	out	0x18, r24	; 24
 112:	d2 cf       	rjmp	.-92     	; 0xb8 <main+0x2>
			case 0x80: LED_RED=0xff; break;
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	88 bb       	out	0x18, r24	; 24
 118:	cf cf       	rjmp	.-98     	; 0xb8 <main+0x2>
			default: LED_RED=0x00; break;
 11a:	18 ba       	out	0x18, r1	; 24
 11c:	cd cf       	rjmp	.-102    	; 0xb8 <main+0x2>

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
