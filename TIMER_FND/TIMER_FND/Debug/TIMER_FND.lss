
TIMER_FND.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000220  000002b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000220  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800118  00800118  000002cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a02  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086a  00000000  00000000  00000d82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e6  00000000  00000000  000015ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  000019d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000457  00000000  00000000  00001a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f7  00000000  00000000  00001eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001fa6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e2       	ldi	r30, 0x20	; 32
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 31       	cpi	r26, 0x18	; 24
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e1       	ldi	r26, 0x18	; 24
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 32       	cpi	r26, 0x23	; 35
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	89 d0       	rcall	.+274    	; 0x1d6 <main>
  c4:	ab c0       	rjmp	.+342    	; 0x21c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:
unsigned char Min = 0;
unsigned char Sec = 0;
unsigned char mSec = 0;
unsigned char flag = 0;

ISR(TIMER0_OVF_vect){
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
	if(++mSec>99) {
  d4:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <mSec>
  d8:	8f 5f       	subi	r24, 0xFF	; 255
  da:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <mSec>
  de:	84 36       	cpi	r24, 0x64	; 100
  e0:	a0 f0       	brcs	.+40     	; 0x10a <__vector_16+0x42>
		mSec=0;
  e2:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <mSec>
		if(++Sec>59){
  e6:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <Sec>
  ea:	8f 5f       	subi	r24, 0xFF	; 255
  ec:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Sec>
  f0:	8c 33       	cpi	r24, 0x3C	; 60
  f2:	58 f0       	brcs	.+22     	; 0x10a <__vector_16+0x42>
			Sec=0;
  f4:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <Sec>
			if(++Min>59) Min=0;
  f8:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <Min>
  fc:	8f 5f       	subi	r24, 0xFF	; 255
  fe:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <Min>
 102:	8c 33       	cpi	r24, 0x3C	; 60
 104:	10 f0       	brcs	.+4      	; 0x10a <__vector_16+0x42>
 106:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <Min>
		}
	}
	TCNT0 = 0xff-tConst;
 10a:	8f e6       	ldi	r24, 0x6F	; 111
 10c:	82 bf       	out	0x32, r24	; 50
}
 10e:	8f 91       	pop	r24
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <Timer0_Init>:

void Timer0_Init(){
	TCCR0 = 0x07;			// Clk / 1024
 11a:	87 e0       	ldi	r24, 0x07	; 7
 11c:	83 bf       	out	0x33, r24	; 51
	TIMSK = 1 << TOIE0;		// Overflow Interrupt Enable
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	87 bf       	out	0x37, r24	; 55
	TIFR = 1 << TOV0;		// Set Overflow Interrupt Flag
 122:	86 bf       	out	0x36, r24	; 54
	TCNT0 = 0xff - tConst;
 124:	8f e6       	ldi	r24, 0x6F	; 111
 126:	82 bf       	out	0x32, r24	; 50
 128:	08 95       	ret

0000012a <Hex2Dec>:
}


void Hex2Dec() {
	unsigned char tmp=Min;
 12a:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <Min>
	NUM[5]=tmp/10;
 12e:	ec e1       	ldi	r30, 0x1C	; 28
 130:	f1 e0       	ldi	r31, 0x01	; 1
 132:	8d ec       	ldi	r24, 0xCD	; 205
 134:	28 9f       	mul	r18, r24
 136:	91 2d       	mov	r25, r1
 138:	11 24       	eor	r1, r1
 13a:	96 95       	lsr	r25
 13c:	96 95       	lsr	r25
 13e:	96 95       	lsr	r25
 140:	95 83       	std	Z+5, r25	; 0x05
	NUM[4]=tmp%10;
 142:	99 0f       	add	r25, r25
 144:	39 2f       	mov	r19, r25
 146:	33 0f       	add	r19, r19
 148:	33 0f       	add	r19, r19
 14a:	93 0f       	add	r25, r19
 14c:	29 1b       	sub	r18, r25
 14e:	24 83       	std	Z+4, r18	; 0x04
	
	tmp=Sec;
 150:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <Sec>
	NUM[3]=tmp/10;
 154:	28 9f       	mul	r18, r24
 156:	91 2d       	mov	r25, r1
 158:	11 24       	eor	r1, r1
 15a:	96 95       	lsr	r25
 15c:	96 95       	lsr	r25
 15e:	96 95       	lsr	r25
 160:	93 83       	std	Z+3, r25	; 0x03
	NUM[2]=tmp%10;
 162:	99 0f       	add	r25, r25
 164:	39 2f       	mov	r19, r25
 166:	33 0f       	add	r19, r19
 168:	33 0f       	add	r19, r19
 16a:	93 0f       	add	r25, r19
 16c:	29 1b       	sub	r18, r25
 16e:	22 83       	std	Z+2, r18	; 0x02
	
	tmp=mSec;
 170:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <mSec>
	NUM[1]=tmp/10;
 174:	98 9f       	mul	r25, r24
 176:	81 2d       	mov	r24, r1
 178:	11 24       	eor	r1, r1
 17a:	86 95       	lsr	r24
 17c:	86 95       	lsr	r24
 17e:	86 95       	lsr	r24
 180:	81 83       	std	Z+1, r24	; 0x01
	NUM[0]=tmp%10;
 182:	88 0f       	add	r24, r24
 184:	28 2f       	mov	r18, r24
 186:	22 0f       	add	r18, r18
 188:	22 0f       	add	r18, r18
 18a:	82 0f       	add	r24, r18
 18c:	98 1b       	sub	r25, r24
 18e:	90 83       	st	Z, r25
 190:	08 95       	ret

00000192 <FND_Display>:
}

void FND_Display(){
	for (unsigned char k=0; k<6; k++) {
 192:	20 e0       	ldi	r18, 0x00	; 0
 194:	15 c0       	rjmp	.+42     	; 0x1c0 <FND_Display+0x2e>
		FND_SEL=DGT[k];
 196:	82 2f       	mov	r24, r18
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	fc 01       	movw	r30, r24
 19c:	e0 50       	subi	r30, 0x00	; 0
 19e:	ff 4f       	sbci	r31, 0xFF	; 255
 1a0:	30 81       	ld	r19, Z
 1a2:	38 bb       	out	0x18, r19	; 24
		FND_DB=FND[ NUM[k] ];
 1a4:	fc 01       	movw	r30, r24
 1a6:	e4 5e       	subi	r30, 0xE4	; 228
 1a8:	fe 4f       	sbci	r31, 0xFE	; 254
 1aa:	e0 81       	ld	r30, Z
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	ea 5f       	subi	r30, 0xFA	; 250
 1b0:	fe 4f       	sbci	r31, 0xFE	; 254
 1b2:	80 81       	ld	r24, Z
 1b4:	83 b9       	out	0x03, r24	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b6:	83 e3       	ldi	r24, 0x33	; 51
 1b8:	9b e2       	ldi	r25, 0x2B	; 43
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <FND_Display+0x28>
	NUM[1]=tmp/10;
	NUM[0]=tmp%10;
}

void FND_Display(){
	for (unsigned char k=0; k<6; k++) {
 1be:	2f 5f       	subi	r18, 0xFF	; 255
 1c0:	26 30       	cpi	r18, 0x06	; 6
 1c2:	48 f3       	brcs	.-46     	; 0x196 <FND_Display+0x4>
		FND_SEL=DGT[k];
		FND_DB=FND[ NUM[k] ];
		_delay_ms(dTime );
	}
}
 1c4:	08 95       	ret

000001c6 <CPU_Setup>:

void CPU_Setup( ) {
	DDRB=0xff;
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	87 bb       	out	0x17, r24	; 23
	DDRE=0xff;
 1ca:	82 b9       	out	0x02, r24	; 2
	DDRF=0xF0;
 1cc:	80 ef       	ldi	r24, 0xF0	; 240
 1ce:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRA=0x00;
 1d2:	1a ba       	out	0x1a, r1	; 26
 1d4:	08 95       	ret

000001d6 <main>:
}

int main(void) {
	CPU_Setup();
 1d6:	f7 df       	rcall	.-18     	; 0x1c6 <CPU_Setup>
	Timer0_Init();
 1d8:	a0 df       	rcall	.-192    	; 0x11a <Timer0_Init>
 1da:	89 b3       	in	r24, 0x19	; 25
	//sei();
	while (1) {
		Keypad = ~SWITCH;
 1dc:	80 95       	com	r24
 1de:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <Keypad>
 1e2:	81 30       	cpi	r24, 0x01	; 1
		switch(Keypad){
 1e4:	19 f0       	breq	.+6      	; 0x1ec <main+0x16>
 1e6:	80 31       	cpi	r24, 0x10	; 16
 1e8:	81 f0       	breq	.+32     	; 0x20a <main+0x34>
 1ea:	15 c0       	rjmp	.+42     	; 0x216 <main+0x40>
 1ec:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
			case 0x01:
				if(flag==0) {
 1f0:	81 11       	cpse	r24, r1
 1f2:	05 c0       	rjmp	.+10     	; 0x1fe <main+0x28>
 1f4:	78 94       	sei
					sei(); flag=1;}
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 1fc:	0c c0       	rjmp	.+24     	; 0x216 <main+0x40>
 1fe:	81 30       	cpi	r24, 0x01	; 1
					
				else if(flag==1) {
 200:	51 f4       	brne	.+20     	; 0x216 <main+0x40>
 202:	f8 94       	cli
					cli(); flag=0;}
 204:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
 208:	06 c0       	rjmp	.+12     	; 0x216 <main+0x40>
 20a:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <Min>
					break;
			case 0x10: Min=0; Sec=0; mSec=0; break;
 20e:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <Sec>
 212:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <mSec>
		}
		Hex2Dec();
 216:	89 df       	rcall	.-238    	; 0x12a <Hex2Dec>
 218:	bc df       	rcall	.-136    	; 0x192 <FND_Display>
		FND_Display();
 21a:	df cf       	rjmp	.-66     	; 0x1da <main+0x4>

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
	}
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>
