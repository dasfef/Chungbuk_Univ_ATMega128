
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000132  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a3d  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000086e  00000000  00000000  00000c69  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000321  00000000  00000000  000014d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000017f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000413  00000000  00000000  0000184c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000102  00000000  00000000  00001c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001d61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	38 d0       	rcall	.+112    	; 0x10a <main>
  9a:	49 c0       	rjmp	.+146    	; 0x12e <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <CPU_Setup>:
#define F_CPU 14745600
#include <avr/io.h>
#include <util/delay.h>

void CPU_Setup() {
	DDRB = 0xff;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	87 bb       	out	0x17, r24	; 23
	DDRE = 0xff;
  a2:	82 b9       	out	0x02, r24	; 2
  a4:	08 95       	ret

000000a6 <RED_LED>:
}

void RED_LED(char M) {
	if(M == 0){
  a6:	81 11       	cpse	r24, r1
  a8:	0b c0       	rjmp	.+22     	; 0xc0 <RED_LED+0x1a>
		PORTB = 0x00;
  aa:	18 ba       	out	0x18, r1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	8f e7       	ldi	r24, 0x7F	; 127
  b0:	94 e0       	ldi	r25, 0x04	; 4
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <RED_LED+0xc>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <RED_LED+0x16>
  bc:	00 00       	nop
  be:	08 95       	ret
		_delay_ms(100);
	} else {
		PORTB = 0xff;
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	88 bb       	out	0x18, r24	; 24
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	8f e7       	ldi	r24, 0x7F	; 127
  c8:	94 e0       	ldi	r25, 0x04	; 4
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <RED_LED+0x24>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <RED_LED+0x2e>
  d4:	00 00       	nop
  d6:	08 95       	ret

000000d8 <GRN_LED>:
		_delay_ms(100);
	}
}

void GRN_LED(char M) {
	if(M == 0){
  d8:	81 11       	cpse	r24, r1
  da:	0b c0       	rjmp	.+22     	; 0xf2 <GRN_LED+0x1a>
		PORTE = 0x00;
  dc:	13 b8       	out	0x03, r1	; 3
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	8f e7       	ldi	r24, 0x7F	; 127
  e2:	94 e0       	ldi	r25, 0x04	; 4
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <GRN_LED+0xc>
  ec:	00 c0       	rjmp	.+0      	; 0xee <GRN_LED+0x16>
  ee:	00 00       	nop
  f0:	08 95       	ret
		_delay_ms(100);
	} else{
		PORTE = 0xff;
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	83 b9       	out	0x03, r24	; 3
  f6:	2f ef       	ldi	r18, 0xFF	; 255
  f8:	8f e7       	ldi	r24, 0x7F	; 127
  fa:	94 e0       	ldi	r25, 0x04	; 4
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <GRN_LED+0x24>
 104:	00 c0       	rjmp	.+0      	; 0x106 <GRN_LED+0x2e>
 106:	00 00       	nop
 108:	08 95       	ret

0000010a <main>:
	}
}

int main(void)
{
	CPU_Setup();
 10a:	c9 df       	rcall	.-110    	; 0x9e <CPU_Setup>
	
    while (1) 
    {
		RED_LED(1);		RED_LED(0);
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	cb df       	rcall	.-106    	; 0xa6 <RED_LED>
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	c9 df       	rcall	.-110    	; 0xa6 <RED_LED>
		RED_LED(1);		RED_LED(0);
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	c7 df       	rcall	.-114    	; 0xa6 <RED_LED>
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	c5 df       	rcall	.-118    	; 0xa6 <RED_LED>
		
		GRN_LED(1);		GRN_LED(0);
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	dc df       	rcall	.-72     	; 0xd8 <GRN_LED>
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	da df       	rcall	.-76     	; 0xd8 <GRN_LED>
		GRN_LED(1);		GRN_LED(0);
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	d8 df       	rcall	.-80     	; 0xd8 <GRN_LED>
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	d6 df       	rcall	.-84     	; 0xd8 <GRN_LED>
 12c:	ef cf       	rjmp	.-34     	; 0x10c <main+0x2>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
