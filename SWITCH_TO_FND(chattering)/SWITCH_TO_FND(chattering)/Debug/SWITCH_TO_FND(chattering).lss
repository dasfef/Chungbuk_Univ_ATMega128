
SWITCH_TO_FND(chattering).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000002d6  0000036a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800110  00800110  0000037a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000037a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009f2  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089c  00000000  00000000  00000e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003dc  00000000  00000000  000016b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  00001a94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000455  00000000  00000000  00001b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000015b  00000000  00000000  00001f69  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000020c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ed       	ldi	r30, 0xD6	; 214
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 31       	cpi	r26, 0x1A	; 26
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	db d0       	rcall	.+438    	; 0x27a <main>
  c4:	06 c1       	rjmp	.+524    	; 0x2d2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <CPU_Setup>:
unsigned char NUM[6]={0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
signed int A;
signed int B;

void CPU_Setup( ) {
	DDRB=0xff;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	87 bb       	out	0x17, r24	; 23
	DDRE=0xff;
  cc:	82 b9       	out	0x02, r24	; 2
	
	DDRD=0x00;
  ce:	11 ba       	out	0x11, r1	; 17
  d0:	08 95       	ret

000000d2 <KeyIn>:
}

unsigned char KeyIn() {
	unsigned char Key = ~SWITCH1;
  d2:	80 b3       	in	r24, 0x10	; 16
  d4:	80 95       	com	r24
	for (int k = 0; k < 100; k++) {
  d6:	40 e0       	ldi	r20, 0x00	; 0
  d8:	50 e0       	ldi	r21, 0x00	; 0
  da:	07 c0       	rjmp	.+14     	; 0xea <KeyIn+0x18>
		Key &= ~SWITCH1;
  dc:	20 b3       	in	r18, 0x10	; 16
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	20 95       	com	r18
  e2:	30 95       	com	r19
  e4:	82 23       	and	r24, r18
	DDRD=0x00;
}

unsigned char KeyIn() {
	unsigned char Key = ~SWITCH1;
	for (int k = 0; k < 100; k++) {
  e6:	4f 5f       	subi	r20, 0xFF	; 255
  e8:	5f 4f       	sbci	r21, 0xFF	; 255
  ea:	44 36       	cpi	r20, 0x64	; 100
  ec:	51 05       	cpc	r21, r1
  ee:	b4 f3       	brlt	.-20     	; 0xdc <KeyIn+0xa>
		Key &= ~SWITCH1;
	}
	return Key;
}
  f0:	08 95       	ret

000000f2 <KeyProc>:

void KeyProc() {
	unsigned char tKey = KeyIn();
  f2:	ef df       	rcall	.-34     	; 0xd2 <KeyIn>
	switch (tKey) {
  f4:	88 30       	cpi	r24, 0x08	; 8
  f6:	e1 f0       	breq	.+56     	; 0x130 <KeyProc+0x3e>
  f8:	18 f4       	brcc	.+6      	; 0x100 <KeyProc+0xe>
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	31 f0       	breq	.+12     	; 0x10a <KeyProc+0x18>
  fe:	08 95       	ret
 100:	80 31       	cpi	r24, 0x10	; 16
 102:	49 f1       	breq	.+82     	; 0x156 <KeyProc+0x64>
 104:	80 38       	cpi	r24, 0x80	; 128
 106:	b9 f1       	breq	.+110    	; 0x176 <KeyProc+0x84>
 108:	08 95       	ret
		case 0x01: if(++A > 999) A=999; break;
 10a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <A>
 10e:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <A+0x1>
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <A+0x1>
 118:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <A>
 11c:	88 3e       	cpi	r24, 0xE8	; 232
 11e:	93 40       	sbci	r25, 0x03	; 3
 120:	cc f1       	brlt	.+114    	; 0x194 <KeyProc+0xa2>
 122:	87 ee       	ldi	r24, 0xE7	; 231
 124:	93 e0       	ldi	r25, 0x03	; 3
 126:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <A+0x1>
 12a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <A>
 12e:	08 95       	ret
		case 0x08: if(++B > 999) B=999; break;
 130:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <B>
 134:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <B+0x1>
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <B+0x1>
 13e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <B>
 142:	88 3e       	cpi	r24, 0xE8	; 232
 144:	93 40       	sbci	r25, 0x03	; 3
 146:	34 f1       	brlt	.+76     	; 0x194 <KeyProc+0xa2>
 148:	87 ee       	ldi	r24, 0xE7	; 231
 14a:	93 e0       	ldi	r25, 0x03	; 3
 14c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <B+0x1>
 150:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <B>
 154:	08 95       	ret
		case 0x10: if(--A < 0) A=0; break;
 156:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <A>
 15a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <A+0x1>
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <A+0x1>
 164:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <A>
 168:	99 23       	and	r25, r25
 16a:	a4 f4       	brge	.+40     	; 0x194 <KeyProc+0xa2>
 16c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <A+0x1>
 170:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <A>
 174:	08 95       	ret
		case 0x80: if(--B < 0) B=0; break;
 176:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <B>
 17a:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <B+0x1>
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <B+0x1>
 184:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <B>
 188:	99 23       	and	r25, r25
 18a:	24 f4       	brge	.+8      	; 0x194 <KeyProc+0xa2>
 18c:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <B+0x1>
 190:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <B>
 194:	08 95       	ret

00000196 <Hex2Dec>:
	}
}

void Hex2Dec() {
 196:	ef 92       	push	r14
 198:	ff 92       	push	r15
 19a:	1f 93       	push	r17
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
	unsigned int tmp = A;
 1a0:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <A>
 1a4:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <A+0x1>
	NUM[5] = tmp / 100;
 1a8:	7a 01       	movw	r14, r20
 1aa:	f6 94       	lsr	r15
 1ac:	e7 94       	ror	r14
 1ae:	f6 94       	lsr	r15
 1b0:	e7 94       	ror	r14
 1b2:	97 01       	movw	r18, r14
 1b4:	ab e7       	ldi	r26, 0x7B	; 123
 1b6:	b4 e1       	ldi	r27, 0x14	; 20
 1b8:	7d d0       	rcall	.+250    	; 0x2b4 <__umulhisi3>
 1ba:	ec 01       	movw	r28, r24
 1bc:	d6 95       	lsr	r29
 1be:	c7 95       	ror	r28
 1c0:	e0 e1       	ldi	r30, 0x10	; 16
 1c2:	f1 e0       	ldi	r31, 0x01	; 1
 1c4:	c5 83       	std	Z+5, r28	; 0x05
	tmp = tmp % 100;
 1c6:	14 e6       	ldi	r17, 0x64	; 100
 1c8:	1c 9f       	mul	r17, r28
 1ca:	c0 01       	movw	r24, r0
 1cc:	1d 9f       	mul	r17, r29
 1ce:	90 0d       	add	r25, r0
 1d0:	11 24       	eor	r1, r1
 1d2:	48 1b       	sub	r20, r24
 1d4:	59 0b       	sbc	r21, r25
	NUM[4] = tmp / 10;
 1d6:	9a 01       	movw	r18, r20
 1d8:	ad ec       	ldi	r26, 0xCD	; 205
 1da:	bc ec       	ldi	r27, 0xCC	; 204
 1dc:	6b d0       	rcall	.+214    	; 0x2b4 <__umulhisi3>
 1de:	ec 01       	movw	r28, r24
 1e0:	d6 95       	lsr	r29
 1e2:	c7 95       	ror	r28
 1e4:	d6 95       	lsr	r29
 1e6:	c7 95       	ror	r28
 1e8:	d6 95       	lsr	r29
 1ea:	c7 95       	ror	r28
 1ec:	c4 83       	std	Z+4, r28	; 0x04
	NUM[3] = tmp % 10;
 1ee:	ce 01       	movw	r24, r28
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	cc 0f       	add	r28, r28
 1f6:	dd 1f       	adc	r29, r29
 1f8:	cc 0f       	add	r28, r28
 1fa:	dd 1f       	adc	r29, r29
 1fc:	cc 0f       	add	r28, r28
 1fe:	dd 1f       	adc	r29, r29
 200:	c8 0f       	add	r28, r24
 202:	d9 1f       	adc	r29, r25
 204:	4c 1b       	sub	r20, r28
 206:	5d 0b       	sbc	r21, r29
 208:	43 83       	std	Z+3, r20	; 0x03
	
	tmp = B;
 20a:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <B>
 20e:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <B+0x1>
	NUM[2] = tmp / 100;
 212:	7a 01       	movw	r14, r20
 214:	f6 94       	lsr	r15
 216:	e7 94       	ror	r14
 218:	f6 94       	lsr	r15
 21a:	e7 94       	ror	r14
 21c:	97 01       	movw	r18, r14
 21e:	ab e7       	ldi	r26, 0x7B	; 123
 220:	b4 e1       	ldi	r27, 0x14	; 20
 222:	48 d0       	rcall	.+144    	; 0x2b4 <__umulhisi3>
 224:	ec 01       	movw	r28, r24
 226:	d6 95       	lsr	r29
 228:	c7 95       	ror	r28
 22a:	c2 83       	std	Z+2, r28	; 0x02
	tmp = tmp % 100;
 22c:	1c 9f       	mul	r17, r28
 22e:	c0 01       	movw	r24, r0
 230:	1d 9f       	mul	r17, r29
 232:	90 0d       	add	r25, r0
 234:	11 24       	eor	r1, r1
 236:	48 1b       	sub	r20, r24
 238:	59 0b       	sbc	r21, r25
	NUM[1] = tmp / 10;
 23a:	9a 01       	movw	r18, r20
 23c:	ad ec       	ldi	r26, 0xCD	; 205
 23e:	bc ec       	ldi	r27, 0xCC	; 204
 240:	39 d0       	rcall	.+114    	; 0x2b4 <__umulhisi3>
 242:	ec 01       	movw	r28, r24
 244:	d6 95       	lsr	r29
 246:	c7 95       	ror	r28
 248:	d6 95       	lsr	r29
 24a:	c7 95       	ror	r28
 24c:	d6 95       	lsr	r29
 24e:	c7 95       	ror	r28
 250:	c1 83       	std	Z+1, r28	; 0x01
	NUM[0] = tmp % 10;
 252:	ce 01       	movw	r24, r28
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	cc 0f       	add	r28, r28
 25a:	dd 1f       	adc	r29, r29
 25c:	cc 0f       	add	r28, r28
 25e:	dd 1f       	adc	r29, r29
 260:	cc 0f       	add	r28, r28
 262:	dd 1f       	adc	r29, r29
 264:	c8 0f       	add	r28, r24
 266:	d9 1f       	adc	r29, r25
 268:	4c 1b       	sub	r20, r28
 26a:	5d 0b       	sbc	r21, r29
 26c:	40 83       	st	Z, r20
}
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	1f 91       	pop	r17
 274:	ff 90       	pop	r15
 276:	ef 90       	pop	r14
 278:	08 95       	ret

0000027a <main>:

int main(void) {
	CPU_Setup();
 27a:	26 df       	rcall	.-436    	; 0xc8 <CPU_Setup>
	
	while(1) {
		for (unsigned char k = 0; k < 6; k++){
 27c:	20 e0       	ldi	r18, 0x00	; 0
 27e:	15 c0       	rjmp	.+42     	; 0x2aa <main+0x30>
			FND_SEL = DGT[k];
 280:	82 2f       	mov	r24, r18
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	fc 01       	movw	r30, r24
 286:	e0 50       	subi	r30, 0x00	; 0
 288:	ff 4f       	sbci	r31, 0xFF	; 255
 28a:	30 81       	ld	r19, Z
 28c:	38 bb       	out	0x18, r19	; 24
			FND_DB = FND[NUM[k]];
 28e:	fc 01       	movw	r30, r24
 290:	e0 5f       	subi	r30, 0xF0	; 240
 292:	fe 4f       	sbci	r31, 0xFE	; 254
 294:	e0 81       	ld	r30, Z
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	ea 5f       	subi	r30, 0xFA	; 250
 29a:	fe 4f       	sbci	r31, 0xFE	; 254
 29c:	80 81       	ld	r24, Z
 29e:	83 b9       	out	0x03, r24	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a0:	83 e3       	ldi	r24, 0x33	; 51
 2a2:	9b e2       	ldi	r25, 0x2B	; 43
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <main+0x2a>

int main(void) {
	CPU_Setup();
	
	while(1) {
		for (unsigned char k = 0; k < 6; k++){
 2a8:	2f 5f       	subi	r18, 0xFF	; 255
 2aa:	26 30       	cpi	r18, 0x06	; 6
			FND_SEL = DGT[k];
			FND_DB = FND[NUM[k]];
			_delay_ms(dTime);
		}
		KeyProc();
 2ac:	48 f3       	brcs	.-46     	; 0x280 <main+0x6>
		Hex2Dec();
 2ae:	21 df       	rcall	.-446    	; 0xf2 <KeyProc>
 2b0:	72 df       	rcall	.-284    	; 0x196 <Hex2Dec>
	}
 2b2:	e4 cf       	rjmp	.-56     	; 0x27c <main+0x2>

000002b4 <__umulhisi3>:
 2b4:	a2 9f       	mul	r26, r18
 2b6:	b0 01       	movw	r22, r0
 2b8:	b3 9f       	mul	r27, r19
 2ba:	c0 01       	movw	r24, r0
 2bc:	a3 9f       	mul	r26, r19
 2be:	70 0d       	add	r23, r0
 2c0:	81 1d       	adc	r24, r1
 2c2:	11 24       	eor	r1, r1
 2c4:	91 1d       	adc	r25, r1
 2c6:	b2 9f       	mul	r27, r18
 2c8:	70 0d       	add	r23, r0
 2ca:	81 1d       	adc	r24, r1
 2cc:	11 24       	eor	r1, r1
 2ce:	91 1d       	adc	r25, r1
 2d0:	08 95       	ret

000002d2 <_exit>:
 2d2:	f8 94       	cli

000002d4 <__stop_program>:
 2d4:	ff cf       	rjmp	.-2      	; 0x2d4 <__stop_program>
