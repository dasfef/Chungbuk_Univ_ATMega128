
SWITCH_TO_FAN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000428  000004bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000428  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800114  00800114  000004d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000500  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a87  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ad  00000000  00000000  0000100b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000496  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  00001d50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000451  00000000  00000000  00001dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000016c  00000000  00000000  00002229  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002395  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e2       	ldi	r30, 0x28	; 40
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e1       	ldi	r26, 0x14	; 20
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 31       	cpi	r26, 0x1E	; 30
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	58 d1       	rcall	.+688    	; 0x374 <main>
  c4:	af c1       	rjmp	.+862    	; 0x424 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <CPU_Setup>:
signed int C = 00;
unsigned char newKey;
unsigned char oldKey;

void CPU_Setup( ) {
	DDRB=0xff;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	87 bb       	out	0x17, r24	; 23
	DDRE=0xff;
  cc:	82 b9       	out	0x02, r24	; 2
	DDRC=0x00;
  ce:	14 ba       	out	0x14, r1	; 20
	DDRD=0x00;
  d0:	11 ba       	out	0x11, r1	; 17
	DDRG=0x03;
  d2:	83 e0       	ldi	r24, 0x03	; 3
  d4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
  d8:	08 95       	ret

000000da <KeyIn>:
}

unsigned char KeyIn() {
	unsigned char Key = ~SWITCH1;
  da:	80 b3       	in	r24, 0x10	; 16
  dc:	80 95       	com	r24
	for (int k = 0; k < 100; k++) {
  de:	40 e0       	ldi	r20, 0x00	; 0
  e0:	50 e0       	ldi	r21, 0x00	; 0
  e2:	07 c0       	rjmp	.+14     	; 0xf2 <KeyIn+0x18>
		Key &= ~SWITCH1;
  e4:	20 b3       	in	r18, 0x10	; 16
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	20 95       	com	r18
  ea:	30 95       	com	r19
  ec:	82 23       	and	r24, r18
	DDRG=0x03;
}

unsigned char KeyIn() {
	unsigned char Key = ~SWITCH1;
	for (int k = 0; k < 100; k++) {
  ee:	4f 5f       	subi	r20, 0xFF	; 255
  f0:	5f 4f       	sbci	r21, 0xFF	; 255
  f2:	44 36       	cpi	r20, 0x64	; 100
  f4:	51 05       	cpc	r21, r1
  f6:	b4 f3       	brlt	.-20     	; 0xe4 <KeyIn+0xa>
		Key &= ~SWITCH1;
	}
	return Key;
}
  f8:	08 95       	ret

000000fa <KeyProc>:

void KeyProc() {
  fa:	cf 93       	push	r28
	unsigned char tKey = KeyIn();
  fc:	ee df       	rcall	.-36     	; 0xda <KeyIn>
  fe:	c8 2f       	mov	r28, r24
	newKey = KeyIn();
 100:	ec df       	rcall	.-40     	; 0xda <KeyIn>
 102:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <newKey>
 106:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <oldKey>
	if(newKey != oldKey){
 10a:	89 17       	cp	r24, r25
 10c:	09 f4       	brne	.+2      	; 0x110 <KeyProc+0x16>
 10e:	7e c0       	rjmp	.+252    	; 0x20c <KeyProc+0x112>
 110:	c4 30       	cpi	r28, 0x04	; 4
		switch (tKey) {
 112:	b1 f1       	breq	.+108    	; 0x180 <KeyProc+0x86>
 114:	28 f4       	brcc	.+10     	; 0x120 <KeyProc+0x26>
 116:	c1 30       	cpi	r28, 0x01	; 1
 118:	69 f0       	breq	.+26     	; 0x134 <KeyProc+0x3a>
 11a:	c2 30       	cpi	r28, 0x02	; 2
 11c:	f1 f0       	breq	.+60     	; 0x15a <KeyProc+0x60>
 11e:	74 c0       	rjmp	.+232    	; 0x208 <KeyProc+0x10e>
 120:	c0 32       	cpi	r28, 0x20	; 32
 122:	09 f4       	brne	.+2      	; 0x126 <KeyProc+0x2c>
 124:	50 c0       	rjmp	.+160    	; 0x1c6 <KeyProc+0xcc>
 126:	c0 34       	cpi	r28, 0x40	; 64
 128:	09 f4       	brne	.+2      	; 0x12c <KeyProc+0x32>
 12a:	5e c0       	rjmp	.+188    	; 0x1e8 <KeyProc+0xee>
 12c:	c0 31       	cpi	r28, 0x10	; 16
 12e:	09 f0       	breq	.+2      	; 0x132 <KeyProc+0x38>
 130:	6b c0       	rjmp	.+214    	; 0x208 <KeyProc+0x10e>
 132:	38 c0       	rjmp	.+112    	; 0x1a4 <KeyProc+0xaa>
 134:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <A>
			case 0x01: if(++A > 23) A=0; break;
 138:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <A+0x1>
 13c:	2f 5f       	subi	r18, 0xFF	; 255
 13e:	3f 4f       	sbci	r19, 0xFF	; 255
 140:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <A+0x1>
 144:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <A>
 148:	28 31       	cpi	r18, 0x18	; 24
 14a:	31 05       	cpc	r19, r1
 14c:	0c f4       	brge	.+2      	; 0x150 <KeyProc+0x56>
 14e:	5c c0       	rjmp	.+184    	; 0x208 <KeyProc+0x10e>
 150:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <A+0x1>
 154:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <A>
 158:	57 c0       	rjmp	.+174    	; 0x208 <KeyProc+0x10e>
 15a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
			case 0x02: if(++B > 59) B=0; break;
 15e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 162:	2f 5f       	subi	r18, 0xFF	; 255
 164:	3f 4f       	sbci	r19, 0xFF	; 255
 166:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 16a:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
 16e:	2c 33       	cpi	r18, 0x3C	; 60
 170:	31 05       	cpc	r19, r1
 172:	0c f4       	brge	.+2      	; 0x176 <KeyProc+0x7c>
 174:	49 c0       	rjmp	.+146    	; 0x208 <KeyProc+0x10e>
 176:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 17a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 17e:	44 c0       	rjmp	.+136    	; 0x208 <KeyProc+0x10e>
 180:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__data_end>
			case 0x04: if(++C > 59) C=0; break;
 184:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__data_end+0x1>
 188:	2f 5f       	subi	r18, 0xFF	; 255
 18a:	3f 4f       	sbci	r19, 0xFF	; 255
 18c:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <__data_end+0x1>
 190:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <__data_end>
 194:	2c 33       	cpi	r18, 0x3C	; 60
 196:	31 05       	cpc	r19, r1
 198:	bc f1       	brlt	.+110    	; 0x208 <KeyProc+0x10e>
 19a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_end+0x1>
 19e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
 1a2:	32 c0       	rjmp	.+100    	; 0x208 <KeyProc+0x10e>
 1a4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <A>
			
			case 0x10: if(--A < 0) A=0; break;
 1a8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <A+0x1>
 1ac:	21 50       	subi	r18, 0x01	; 1
 1ae:	31 09       	sbc	r19, r1
 1b0:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <A+0x1>
 1b4:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <A>
 1b8:	33 23       	and	r19, r19
 1ba:	34 f5       	brge	.+76     	; 0x208 <KeyProc+0x10e>
 1bc:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <A+0x1>
 1c0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <A>
 1c4:	21 c0       	rjmp	.+66     	; 0x208 <KeyProc+0x10e>
 1c6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
			case 0x20: if(--B < 0) B=0; break;
 1ca:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ce:	21 50       	subi	r18, 0x01	; 1
 1d0:	31 09       	sbc	r19, r1
 1d2:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1d6:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
 1da:	33 23       	and	r19, r19
 1dc:	ac f4       	brge	.+42     	; 0x208 <KeyProc+0x10e>
 1de:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1e2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e6:	10 c0       	rjmp	.+32     	; 0x208 <KeyProc+0x10e>
 1e8:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__data_end>
			case 0x40: if(--C < 0) C=0; break;
 1ec:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__data_end+0x1>
 1f0:	21 50       	subi	r18, 0x01	; 1
 1f2:	31 09       	sbc	r19, r1
 1f4:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <__data_end+0x1>
 1f8:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <__data_end>
 1fc:	33 23       	and	r19, r19
 1fe:	24 f4       	brge	.+8      	; 0x208 <KeyProc+0x10e>
 200:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_end+0x1>
 204:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
 208:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <oldKey>
		}
		oldKey = newKey;
 20c:	cf 91       	pop	r28
	}
	
}
 20e:	08 95       	ret

00000210 <Hex2Dec>:
 210:	cf 93       	push	r28

void Hex2Dec() {
 212:	df 93       	push	r29
	unsigned int tmp = A;
 214:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <A>
 218:	d0 91 03 01 	lds	r29, 0x0103	; 0x800103 <A+0x1>
	NUM[5] = tmp / 10;
 21c:	9e 01       	movw	r18, r28
 21e:	ad ec       	ldi	r26, 0xCD	; 205
 220:	bc ec       	ldi	r27, 0xCC	; 204
 222:	f1 d0       	rcall	.+482    	; 0x406 <__umulhisi3>
 224:	ac 01       	movw	r20, r24
 226:	56 95       	lsr	r21
 228:	47 95       	ror	r20
 22a:	56 95       	lsr	r21
 22c:	47 95       	ror	r20
 22e:	56 95       	lsr	r21
 230:	47 95       	ror	r20
 232:	e6 e1       	ldi	r30, 0x16	; 22
 234:	f1 e0       	ldi	r31, 0x01	; 1
 236:	45 83       	std	Z+5, r20	; 0x05
	tmp = tmp % 10;
 238:	ca 01       	movw	r24, r20
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	44 0f       	add	r20, r20
 240:	55 1f       	adc	r21, r21
 242:	44 0f       	add	r20, r20
 244:	55 1f       	adc	r21, r21
 246:	44 0f       	add	r20, r20
 248:	55 1f       	adc	r21, r21
 24a:	48 0f       	add	r20, r24
 24c:	59 1f       	adc	r21, r25
 24e:	c4 1b       	sub	r28, r20
 250:	d5 0b       	sbc	r29, r21
	NUM[4] = tmp % 10;
 252:	9e 01       	movw	r18, r28
 254:	d8 d0       	rcall	.+432    	; 0x406 <__umulhisi3>
 256:	96 95       	lsr	r25
 258:	87 95       	ror	r24
 25a:	96 95       	lsr	r25
 25c:	87 95       	ror	r24
 25e:	96 95       	lsr	r25
 260:	87 95       	ror	r24
 262:	9c 01       	movw	r18, r24
 264:	22 0f       	add	r18, r18
 266:	33 1f       	adc	r19, r19
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	82 0f       	add	r24, r18
 276:	93 1f       	adc	r25, r19
 278:	9e 01       	movw	r18, r28
 27a:	28 1b       	sub	r18, r24
 27c:	39 0b       	sbc	r19, r25
 27e:	24 83       	std	Z+4, r18	; 0x04
	
	tmp = B;
 280:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 284:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	NUM[3] = tmp / 10;
 288:	9e 01       	movw	r18, r28
 28a:	bd d0       	rcall	.+378    	; 0x406 <__umulhisi3>
 28c:	ac 01       	movw	r20, r24
 28e:	56 95       	lsr	r21
 290:	47 95       	ror	r20
 292:	56 95       	lsr	r21
 294:	47 95       	ror	r20
 296:	56 95       	lsr	r21
 298:	47 95       	ror	r20
 29a:	43 83       	std	Z+3, r20	; 0x03
	tmp = tmp % 10;
 29c:	ca 01       	movw	r24, r20
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	44 0f       	add	r20, r20
 2a4:	55 1f       	adc	r21, r21
 2a6:	44 0f       	add	r20, r20
 2a8:	55 1f       	adc	r21, r21
 2aa:	44 0f       	add	r20, r20
 2ac:	55 1f       	adc	r21, r21
 2ae:	48 0f       	add	r20, r24
 2b0:	59 1f       	adc	r21, r25
 2b2:	c4 1b       	sub	r28, r20
	NUM[2] = tmp % 10;
 2b4:	d5 0b       	sbc	r29, r21
 2b6:	9e 01       	movw	r18, r28
 2b8:	a6 d0       	rcall	.+332    	; 0x406 <__umulhisi3>
 2ba:	96 95       	lsr	r25
 2bc:	87 95       	ror	r24
 2be:	96 95       	lsr	r25
 2c0:	87 95       	ror	r24
 2c2:	96 95       	lsr	r25
 2c4:	87 95       	ror	r24
 2c6:	9c 01       	movw	r18, r24
 2c8:	22 0f       	add	r18, r18
 2ca:	33 1f       	adc	r19, r19
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	82 0f       	add	r24, r18
 2da:	93 1f       	adc	r25, r19
 2dc:	9e 01       	movw	r18, r28
 2de:	28 1b       	sub	r18, r24
 2e0:	39 0b       	sbc	r19, r25
 2e2:	22 83       	std	Z+2, r18	; 0x02

	tmp = C;
 2e4:	c0 91 14 01 	lds	r28, 0x0114	; 0x800114 <__data_end>
 2e8:	d0 91 15 01 	lds	r29, 0x0115	; 0x800115 <__data_end+0x1>
	NUM[1] = tmp / 10;
 2ec:	9e 01       	movw	r18, r28
 2ee:	8b d0       	rcall	.+278    	; 0x406 <__umulhisi3>
 2f0:	ac 01       	movw	r20, r24
 2f2:	56 95       	lsr	r21
 2f4:	47 95       	ror	r20
 2f6:	56 95       	lsr	r21
 2f8:	47 95       	ror	r20
 2fa:	56 95       	lsr	r21
 2fc:	47 95       	ror	r20
 2fe:	41 83       	std	Z+1, r20	; 0x01
	tmp = tmp % 10;
 300:	ca 01       	movw	r24, r20
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	44 0f       	add	r20, r20
 308:	55 1f       	adc	r21, r21
 30a:	44 0f       	add	r20, r20
 30c:	55 1f       	adc	r21, r21
 30e:	44 0f       	add	r20, r20
 310:	55 1f       	adc	r21, r21
 312:	48 0f       	add	r20, r24
 314:	59 1f       	adc	r21, r25
 316:	c4 1b       	sub	r28, r20
	NUM[0] = tmp % 10;
 318:	d5 0b       	sbc	r29, r21
 31a:	9e 01       	movw	r18, r28
 31c:	74 d0       	rcall	.+232    	; 0x406 <__umulhisi3>
 31e:	96 95       	lsr	r25
 320:	87 95       	ror	r24
 322:	96 95       	lsr	r25
 324:	87 95       	ror	r24
 326:	96 95       	lsr	r25
 328:	87 95       	ror	r24
 32a:	9c 01       	movw	r18, r24
 32c:	22 0f       	add	r18, r18
 32e:	33 1f       	adc	r19, r19
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	82 0f       	add	r24, r18
 33e:	93 1f       	adc	r25, r19
 340:	9e 01       	movw	r18, r28
 342:	28 1b       	sub	r18, r24
 344:	39 0b       	sbc	r19, r25
 346:	20 83       	st	Z, r18
	
	
}
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	08 95       	ret

0000034e <Timer>:

void Timer() {
	C++;
 34e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 352:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 356:	01 96       	adiw	r24, 0x01	; 1
 358:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 35c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 360:	2f ef       	ldi	r18, 0xFF	; 255
 362:	8f ef       	ldi	r24, 0xFF	; 255
 364:	9c e2       	ldi	r25, 0x2C	; 44
 366:	21 50       	subi	r18, 0x01	; 1
 368:	80 40       	sbci	r24, 0x00	; 0
 36a:	90 40       	sbci	r25, 0x00	; 0
 36c:	e1 f7       	brne	.-8      	; 0x366 <Timer+0x18>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <Timer+0x22>
 370:	00 00       	nop
 372:	08 95       	ret

00000374 <main>:
	_delay_ms(1000);
}

int main(void) {
	CPU_Setup();
 374:	a9 de       	rcall	.-686    	; 0xc8 <CPU_Setup>
	
	while(1) {
		for (unsigned char k = 0; k < 6; k++){
 376:	20 e0       	ldi	r18, 0x00	; 0
 378:	15 c0       	rjmp	.+42     	; 0x3a4 <main+0x30>
			FND_SEL = DGT[k];
 37a:	82 2f       	mov	r24, r18
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	fc 01       	movw	r30, r24
 380:	ec 5f       	subi	r30, 0xFC	; 252
 382:	fe 4f       	sbci	r31, 0xFE	; 254
 384:	30 81       	ld	r19, Z
 386:	38 bb       	out	0x18, r19	; 24
			FND_DB = FND[NUM[k]];
 388:	fc 01       	movw	r30, r24
 38a:	ea 5e       	subi	r30, 0xEA	; 234
 38c:	fe 4f       	sbci	r31, 0xFE	; 254
 38e:	e0 81       	ld	r30, Z
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	e6 5f       	subi	r30, 0xF6	; 246
 394:	fe 4f       	sbci	r31, 0xFE	; 254
 396:	80 81       	ld	r24, Z
 398:	83 b9       	out	0x03, r24	; 3
 39a:	83 e3       	ldi	r24, 0x33	; 51
 39c:	9b e2       	ldi	r25, 0x2B	; 43
 39e:	01 97       	sbiw	r24, 0x01	; 1
 3a0:	f1 f7       	brne	.-4      	; 0x39e <main+0x2a>

int main(void) {
	CPU_Setup();
	
	while(1) {
		for (unsigned char k = 0; k < 6; k++){
 3a2:	2f 5f       	subi	r18, 0xFF	; 255
 3a4:	26 30       	cpi	r18, 0x06	; 6
			FND_SEL = DGT[k];
			FND_DB = FND[NUM[k]];
			_delay_ms(dTime);
		}
		KeyProc();
 3a6:	48 f3       	brcs	.-46     	; 0x37a <main+0x6>
		Hex2Dec();
 3a8:	a8 de       	rcall	.-688    	; 0xfa <KeyProc>
 3aa:	32 df       	rcall	.-412    	; 0x210 <Hex2Dec>
		Timer();
 3ac:	d0 df       	rcall	.-96     	; 0x34e <Timer>
 3ae:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
		
		if(A==12 && B==30 && C==30){
 3b2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <A+0x1>
 3b6:	8c 30       	cpi	r24, 0x0C	; 12
 3b8:	91 05       	cpc	r25, r1
 3ba:	91 f4       	brne	.+36     	; 0x3e0 <main+0x6c>
 3bc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3c0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3c4:	2e 31       	cpi	r18, 0x1E	; 30
 3c6:	31 05       	cpc	r19, r1
 3c8:	59 f4       	brne	.+22     	; 0x3e0 <main+0x6c>
 3ca:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__data_end>
 3ce:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__data_end+0x1>
 3d2:	2e 31       	cpi	r18, 0x1E	; 30
 3d4:	31 05       	cpc	r19, r1
 3d6:	21 f4       	brne	.+8      	; 0x3e0 <main+0x6c>
 3d8:	81 e0       	ldi	r24, 0x01	; 1
			FAN = 0x01;
 3da:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
 3de:	cb cf       	rjmp	.-106    	; 0x376 <main+0x2>
 3e0:	0c 97       	sbiw	r24, 0x0c	; 12
		}
		else if(A==12 && B==30 && C==40){
 3e2:	49 f6       	brne	.-110    	; 0x376 <main+0x2>
 3e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3e8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3ec:	4e 97       	sbiw	r24, 0x1e	; 30
 3ee:	09 f0       	breq	.+2      	; 0x3f2 <main+0x7e>
 3f0:	c2 cf       	rjmp	.-124    	; 0x376 <main+0x2>
 3f2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 3f6:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 3fa:	88 97       	sbiw	r24, 0x28	; 40
 3fc:	09 f0       	breq	.+2      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fe:	bb cf       	rjmp	.-138    	; 0x376 <main+0x2>
 400:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
			FAN = 0x00;
 404:	b8 cf       	rjmp	.-144    	; 0x376 <main+0x2>

00000406 <__umulhisi3>:
 406:	a2 9f       	mul	r26, r18
 408:	b0 01       	movw	r22, r0
 40a:	b3 9f       	mul	r27, r19
 40c:	c0 01       	movw	r24, r0
 40e:	a3 9f       	mul	r26, r19
 410:	70 0d       	add	r23, r0
 412:	81 1d       	adc	r24, r1
 414:	11 24       	eor	r1, r1
 416:	91 1d       	adc	r25, r1
 418:	b2 9f       	mul	r27, r18
 41a:	70 0d       	add	r23, r0
 41c:	81 1d       	adc	r24, r1
 41e:	11 24       	eor	r1, r1
 420:	91 1d       	adc	r25, r1
 422:	08 95       	ret

00000424 <_exit>:
 424:	f8 94       	cli

00000426 <__stop_program>:
 426:	ff cf       	rjmp	.-2      	; 0x426 <__stop_program>
