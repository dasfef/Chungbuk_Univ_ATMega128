
MOTOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000152  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000083d  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a2  00000000  00000000  00000a25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000257  00000000  00000000  000011c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001420  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c5  00000000  00000000  00001454  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001819  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	06 d0       	rcall	.+12     	; 0xb6 <main>
  aa:	17 c0       	rjmp	.+46     	; 0xda <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <CPU_Setup>:
#define SWITCH PINA

unsigned char Keypad;

void CPU_Setup(){
	MOTOR_DDR = 0x03;
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	87 bb       	out	0x17, r24	; 23
	DDRA=0x00;
  b2:	1a ba       	out	0x1a, r1	; 26
  b4:	08 95       	ret

000000b6 <main>:
}

int main(void) {
	CPU_Setup();
  b6:	fb df       	rcall	.-10     	; 0xae <CPU_Setup>
	
	while(1) {
		Keypad = ~SWITCH;
  b8:	89 b3       	in	r24, 0x19	; 25
  ba:	80 95       	com	r24
  bc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		switch(Keypad) {
  c0:	82 30       	cpi	r24, 0x02	; 2
  c2:	31 f0       	breq	.+12     	; 0xd0 <main+0x1a>
  c4:	80 31       	cpi	r24, 0x10	; 16
  c6:	39 f0       	breq	.+14     	; 0xd6 <main+0x20>
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	b1 f7       	brne	.-20     	; 0xb8 <main+0x2>
			case 0x01:
				MOTOR_PORT=0x01;
  cc:	88 bb       	out	0x18, r24	; 24
				break;
  ce:	f4 cf       	rjmp	.-24     	; 0xb8 <main+0x2>
			case 0x02:
				MOTOR_PORT=0x02;
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	88 bb       	out	0x18, r24	; 24
				break;
  d4:	f1 cf       	rjmp	.-30     	; 0xb8 <main+0x2>
			case 0x10:
				MOTOR_PORT=0x00;
  d6:	18 ba       	out	0x18, r1	; 24
				break;
  d8:	ef cf       	rjmp	.-34     	; 0xb8 <main+0x2>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
